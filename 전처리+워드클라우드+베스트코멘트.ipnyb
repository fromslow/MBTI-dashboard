{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"전처리+워드클라우드+베스트코멘트","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EJ_Gfe6aAFnx","executionInfo":{"status":"ok","timestamp":1615108770249,"user_tz":-540,"elapsed":17422,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"077b8b0d-5371-4f42-b3dd-ad9627b03835"},"source":["import os, sys \n","from google.colab import drive \n","drive.mount('/content/mnt') \n","nb_path = '/content/notebooks' \n","os.symlink('/content/mnt/My Drive/Colab Notebooks', nb_path) \n","sys.path.insert(0, nb_path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/mnt\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YB1nicVsALX0","executionInfo":{"status":"ok","timestamp":1615108771128,"user_tz":-540,"elapsed":18283,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"6945b8da-d843-4848-a90a-fc4f4f523987"},"source":["import os\n","\n","import pandas as pd\n","import numpy as np\n","\n","from pathlib import Path\n","from datetime import datetime\n","\n","BASE_DIR = Path(r\"/content/mnt/Shared drives/MBTI/\")\n","data_list = os.listdir(BASE_DIR / \"data\")\n","print(data_list)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['NanumSquare_acB.ttf', 'MBTI.csv', 'ESTJ.csv', 'ISFJ.csv', 'ESFJ.csv', 'ISTP.csv', 'ESTP.csv', 'ISFP.csv', 'ESFP.csv', 'INFJ.csv', 'ENFJ.csv', 'INFP.csv', 'ENFP.csv', 'INTJ.csv', 'ENTJ.csv', 'INTP.csv', 'ENTP.csv', '뇌.png', 'ISTJ.csv', 'ISTJ.png', 'ESTJ.png', 'ISFJ.png', 'ESFJ.png', 'ISTP.png', 'ESTP.png', 'ISFP.png', 'ESFP.png', 'INFJ.png', 'ENFJ.png', 'INFP.png', 'ENFP.png', 'INTJ.png', 'ENTJ.png', 'INTP.png', 'ENTP.png', '뇌_파랑.png']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TBl7w4rZr-No"},"source":["type_ = ['ESTJ.csv', 'ISFJ.csv', 'ESFJ.csv', 'ISTP.csv', 'ESTP.csv', 'ISFP.csv', 'ESFP.csv', 'INFJ.csv', 'ENFJ.csv', 'INFP.csv', 'ENFP.csv', 'INTJ.csv', 'ENTJ.csv', 'INTP.csv', 'ENTP.csv', 'ISTJ.csv']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHIyYfLZHBJq","executionInfo":{"status":"ok","timestamp":1615108775203,"user_tz":-540,"elapsed":22341,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"2fbd2c89-5082-40e3-b0b3-0f4b75c0efd4"},"source":["! pip install wordcloud"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: wordcloud in /usr/local/lib/python3.7/dist-packages (1.5.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from wordcloud) (7.0.0)\n","Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.7/dist-packages (from wordcloud) (1.19.5)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Dcu9wEZXHHxc"},"source":["# 미설치시 ! pip install wordcloud\n","from wordcloud import WordCloud\n","import matplotlib \n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jw5yKg1FASVE","executionInfo":{"status":"ok","timestamp":1615108921820,"user_tz":-540,"elapsed":145663,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"3233e648-e9d0-49aa-8d9c-35286d4c1af7"},"source":["## Mecab 사전에 MBTI유형 등록하기\n","# mecab 설치\n","!set -x \\\n","&& pip install konlpy \\\n","&& curl -s https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh | bash -x\n","\n","# 종성 여부 판단 - nnp사전에 추가할 때 종성여부를 넣어주어야 함\n","!pip install jamo\n","\n","# 초기에 만들어져 있던 nnp사전\n","with open(\"/tmp/mecab-ko-dic-2.1.1-20180720/user-dic/nnp.csv\", 'r', encoding='utf-8') as f: \n","    file_data = f.readlines()\n","\n","# dict_ls는 넣고싶은 nnp 목록(list 형태)\n","dict_ls = 'ISTP,ISTJ,ISFP,ISFJ,INTP,INTJ,INFP,INFJ,ESTP,ESTJ,ESFP,ESFJ,ENTP,ENTJ,ENFP,ENFJ,잇팁,잇티제,잇프피,잇프제,인팁,인티제,인프피,인프제,엣팁,엣티제,잇프피,엣프제,엔팁,엔티제,엔프피,엔프제'.replace(\" \", '').split(',')\n","\n","# 종성여부를 판단하는 사용자 정의함수\n","from jamo import h2j, j2hcj \n","def get_jongsung_TF(sample_text): \n","    sample_text_list = list(sample_text) \n","    last_word = sample_text_list[-1]\n","    last_word_jamo_list = list(j2hcj(h2j(last_word))) \n","    last_jamo = last_word_jamo_list[-1] \n","     \n","    jongsung_TF = \"T\" \n","    \n","    if last_jamo in ['ㅏ', 'ㅑ', 'ㅓ', 'ㅕ', 'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ', 'ㅘ', 'ㅚ', 'ㅙ', 'ㅝ', 'ㅞ', 'ㅢ', 'ㅐ,ㅔ', 'ㅟ', 'ㅖ', 'ㅒ']: \n","        jongsung_TF = \"F\"\n","\n","    return jongsung_TF\n","\n","# nnp추가 형식에 맞추어서 dict_ls 추가과정\n","for word in dict_ls: \n","    jongsung_TF = get_jongsung_TF(word) \n","    line = '{},,,,NNP,*,{},{},*,*,*,*,*\\n'.format(word, jongsung_TF, word) \n","    file_data.append(line)\n","\n","with open(\"/tmp/mecab-ko-dic-2.1.1-20180720/user-dic/nnp.csv\", 'w', encoding='utf-8') as f: \n","    for line in file_data: \n","        f.write(line)\n","\n","# make 파일을 통해서 최종 compile\n","!bash /tmp/mecab-ko-dic-2.1.1-20180720/tools/add-userdic.sh\n","%cd /tmp/mecab-ko-dic-2.1.1-20180720/\n","!./configure\n","!make\n","!make install"],"execution_count":null,"outputs":[{"output_type":"stream","text":["+ pip install konlpy\n","Collecting konlpy\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/85/0e/f385566fec837c0b83f216b2da65db9997b35dd675e107752005b7d392b1/konlpy-0.5.2-py2.py3-none-any.whl (19.4MB)\n","\u001b[K     |████████████████████████████████| 19.4MB 1.3MB/s \n","\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (4.2.6)\n","Requirement already satisfied: tweepy>=3.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (3.10.0)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.19.5)\n","Collecting colorama\n","  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n","Collecting beautifulsoup4==4.6.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9e/d4/10f46e5cfac773e22707237bfcd51bbffeaf0a576b0a847ec7ab15bd7ace/beautifulsoup4-4.6.0-py3-none-any.whl (86kB)\n","\u001b[K     |████████████████████████████████| 92kB 8.8MB/s \n","\u001b[?25hCollecting JPype1>=0.7.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cd/a5/9781e2ef4ca92d09912c4794642c1653aea7607f473e156cf4d423a881a1/JPype1-1.2.1-cp37-cp37m-manylinux2010_x86_64.whl (457kB)\n","\u001b[K     |████████████████████████████████| 460kB 45.9MB/s \n","\u001b[?25hRequirement already satisfied: requests[socks]>=2.11.1 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (2.23.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (1.15.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (1.3.0)\n","Requirement already satisfied: typing-extensions; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (3.7.4.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.24.3)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6; extra == \"socks\" in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.7.1)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->tweepy>=3.7.0->konlpy) (3.1.0)\n","Installing collected packages: colorama, beautifulsoup4, JPype1, konlpy\n","  Found existing installation: beautifulsoup4 4.6.3\n","    Uninstalling beautifulsoup4-4.6.3:\n","      Successfully uninstalled beautifulsoup4-4.6.3\n","Successfully installed JPype1-1.2.1 beautifulsoup4-4.6.0 colorama-0.4.4 konlpy-0.5.2\n","+ curl -s https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh\n","+ bash -x\n","+ mecab_dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic\n","+ set -e\n","++ uname\n","+ os=Linux\n","+ [[ ! Linux == \\L\\i\\n\\u\\x ]]\n","+ hash sudo\n","+ sudo=sudo\n","+ python=python3\n","+ hash pyenv\n","+ at_user_site=\n","++ check_python_site_location_is_writable\n","++ python3 -\n","+ [[ 1 == \\0 ]]\n","+ hash automake\n","+ echo 'Installing automake (A dependency for mecab-ko)'\n","Installing automake (A dependency for mecab-ko)\n","+ install_automake\n","+ '[' Linux == Linux ']'\n","++ grep -Ei 'debian|buntu|mint' /etc/lsb-release /etc/os-release\n","+ '[' '/etc/lsb-release:DISTRIB_ID=Ubuntu\n","/etc/lsb-release:DISTRIB_DESCRIPTION=\"Ubuntu 18.04.5 LTS\"\n","/etc/os-release:NAME=\"Ubuntu\"\n","/etc/os-release:ID=ubuntu\n","/etc/os-release:ID_LIKE=debian\n","/etc/os-release:PRETTY_NAME=\"Ubuntu 18.04.5 LTS\"\n","/etc/os-release:HOME_URL=\"https://www.ubuntu.com/\"\n","/etc/os-release:SUPPORT_URL=\"https://help.ubuntu.com/\"\n","/etc/os-release:BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\n","/etc/os-release:PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\n","/etc/os-release:UBUNTU_CODENAME=bionic' ']'\n","+ sudo apt-get update\n","Get:1 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","Ign:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Ign:3 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Get:4 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release [697 B]\n","Get:5 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","Get:6 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release [564 B]\n","Get:7 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release.gpg [836 B]\n","Get:8 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release.gpg [833 B]\n","Get:9 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n","Ign:10 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages\n","Get:10 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [577 kB]\n","Hit:11 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:12 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Packages [73.8 kB]\n","Get:13 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Get:14 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [1,963 kB]\n","Hit:15 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Get:16 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease [15.9 kB]\n","Get:17 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Get:18 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,396 kB]\n","Get:19 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [24.5 kB]\n","Get:20 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [324 kB]\n","Get:21 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2,394 kB]\n","Get:22 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease [21.3 kB]\n","Get:23 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,744 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,163 kB]\n","Get:25 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [31.4 kB]\n","Get:26 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [353 kB]\n","Get:27 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [892 kB]\n","Get:28 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic/main amd64 Packages [39.5 kB]\n","Get:29 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic/main amd64 Packages [49.4 kB]\n","Fetched 12.3 MB in 5s (2,627 kB/s)\n","Reading package lists... Done\n","+ sudo apt-get install -y automake\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following additional packages will be installed:\n","  autoconf autotools-dev libsigsegv2 m4\n","Suggested packages:\n","  autoconf-archive gnu-standards autoconf-doc libtool gettext m4-doc\n","The following NEW packages will be installed:\n","  autoconf automake autotools-dev libsigsegv2 m4\n","0 upgraded, 5 newly installed, 0 to remove and 60 not upgraded.\n","Need to get 1,082 kB of archives.\n","After this operation, 3,994 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 libsigsegv2 amd64 2.12-1 [14.7 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu bionic/main amd64 m4 amd64 1.4.18-1 [197 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu bionic/main amd64 autoconf all 2.69-11 [322 kB]\n","Get:4 http://archive.ubuntu.com/ubuntu bionic/main amd64 autotools-dev all 20180224.1 [39.6 kB]\n","Get:5 http://archive.ubuntu.com/ubuntu bionic/main amd64 automake all 1:1.15.1-3ubuntu2 [509 kB]\n","Fetched 1,082 kB in 1s (832 kB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 5.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package libsigsegv2:amd64.\n","(Reading database ... 160975 files and directories currently installed.)\n","Preparing to unpack .../libsigsegv2_2.12-1_amd64.deb ...\n","Unpacking libsigsegv2:amd64 (2.12-1) ...\n","Selecting previously unselected package m4.\n","Preparing to unpack .../archives/m4_1.4.18-1_amd64.deb ...\n","Unpacking m4 (1.4.18-1) ...\n","Selecting previously unselected package autoconf.\n","Preparing to unpack .../autoconf_2.69-11_all.deb ...\n","Unpacking autoconf (2.69-11) ...\n","Selecting previously unselected package autotools-dev.\n","Preparing to unpack .../autotools-dev_20180224.1_all.deb ...\n","Unpacking autotools-dev (20180224.1) ...\n","Selecting previously unselected package automake.\n","Preparing to unpack .../automake_1%3a1.15.1-3ubuntu2_all.deb ...\n","Unpacking automake (1:1.15.1-3ubuntu2) ...\n","Setting up libsigsegv2:amd64 (2.12-1) ...\n","Setting up m4 (1.4.18-1) ...\n","Setting up autotools-dev (20180224.1) ...\n","Setting up autoconf (2.69-11) ...\n","Setting up automake (1:1.15.1-3ubuntu2) ...\n","update-alternatives: using /usr/bin/automake-1.15 to provide /usr/bin/automake (automake) in auto mode\n","Processing triggers for libc-bin (2.27-3ubuntu1.2) ...\n","/sbin/ldconfig.real: /usr/local/lib/python3.7/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n","\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n","+ hash mecab\n","+ echo 'Install mecab-ko-dic'\n","Install mecab-ko-dic\n","+ install_mecab_ko\n","+ cd /tmp\n","+ curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz\n","  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","100 1381k  100 1381k    0     0  1280k      0  0:00:01  0:00:01 --:--:-- 14.5M\n","+ tar zxfv mecab-0.996-ko-0.9.2.tar.gz\n","mecab-0.996-ko-0.9.2/\n","mecab-0.996-ko-0.9.2/example/\n","mecab-0.996-ko-0.9.2/example/example.cpp\n","mecab-0.996-ko-0.9.2/example/example_lattice.cpp\n","mecab-0.996-ko-0.9.2/example/example_lattice.c\n","mecab-0.996-ko-0.9.2/example/example.c\n","mecab-0.996-ko-0.9.2/example/thread_test.cpp\n","mecab-0.996-ko-0.9.2/mecab-config.in\n","mecab-0.996-ko-0.9.2/man/\n","mecab-0.996-ko-0.9.2/man/Makefile.am\n","mecab-0.996-ko-0.9.2/man/mecab.1\n","mecab-0.996-ko-0.9.2/man/Makefile.in\n","mecab-0.996-ko-0.9.2/mecab.iss.in\n","mecab-0.996-ko-0.9.2/config.guess\n","mecab-0.996-ko-0.9.2/README\n","mecab-0.996-ko-0.9.2/COPYING\n","mecab-0.996-ko-0.9.2/CHANGES.md\n","mecab-0.996-ko-0.9.2/README.md\n","mecab-0.996-ko-0.9.2/INSTALL\n","mecab-0.996-ko-0.9.2/config.sub\n","mecab-0.996-ko-0.9.2/configure.in\n","mecab-0.996-ko-0.9.2/swig/\n","mecab-0.996-ko-0.9.2/swig/Makefile\n","mecab-0.996-ko-0.9.2/swig/version.h.in\n","mecab-0.996-ko-0.9.2/swig/version.h\n","mecab-0.996-ko-0.9.2/swig/MeCab.i\n","mecab-0.996-ko-0.9.2/aclocal.m4\n","mecab-0.996-ko-0.9.2/LGPL\n","mecab-0.996-ko-0.9.2/Makefile.am\n","mecab-0.996-ko-0.9.2/configure\n","mecab-0.996-ko-0.9.2/tests/\n","mecab-0.996-ko-0.9.2/tests/autolink/\n","mecab-0.996-ko-0.9.2/tests/autolink/unk.def\n","mecab-0.996-ko-0.9.2/tests/autolink/dicrc\n","mecab-0.996-ko-0.9.2/tests/autolink/dic.csv\n","mecab-0.996-ko-0.9.2/tests/autolink/test\n","mecab-0.996-ko-0.9.2/tests/autolink/char.def\n","mecab-0.996-ko-0.9.2/tests/autolink/matrix.def\n","mecab-0.996-ko-0.9.2/tests/autolink/test.gld\n","mecab-0.996-ko-0.9.2/tests/t9/\n","mecab-0.996-ko-0.9.2/tests/t9/unk.def\n","mecab-0.996-ko-0.9.2/tests/t9/ipadic.pl\n","mecab-0.996-ko-0.9.2/tests/t9/dicrc\n","mecab-0.996-ko-0.9.2/tests/t9/dic.csv\n","mecab-0.996-ko-0.9.2/tests/t9/test\n","mecab-0.996-ko-0.9.2/tests/t9/char.def\n","mecab-0.996-ko-0.9.2/tests/t9/matrix.def\n","mecab-0.996-ko-0.9.2/tests/t9/mkdic.pl\n","mecab-0.996-ko-0.9.2/tests/t9/test.gld\n","mecab-0.996-ko-0.9.2/tests/cost-train/\n","mecab-0.996-ko-0.9.2/tests/cost-train/ipa.train\n","mecab-0.996-ko-0.9.2/tests/cost-train/ipa.test\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/rewrite.def\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/feature.def\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/unk.def\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/dicrc\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/dic.csv\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/char.def\n","mecab-0.996-ko-0.9.2/tests/cost-train/seed/matrix.def\n","mecab-0.996-ko-0.9.2/tests/run-eval.sh\n","mecab-0.996-ko-0.9.2/tests/run-cost-train.sh\n","mecab-0.996-ko-0.9.2/tests/Makefile.am\n","mecab-0.996-ko-0.9.2/tests/katakana/\n","mecab-0.996-ko-0.9.2/tests/katakana/unk.def\n","mecab-0.996-ko-0.9.2/tests/katakana/dicrc\n","mecab-0.996-ko-0.9.2/tests/katakana/dic.csv\n","mecab-0.996-ko-0.9.2/tests/katakana/test\n","mecab-0.996-ko-0.9.2/tests/katakana/char.def\n","mecab-0.996-ko-0.9.2/tests/katakana/matrix.def\n","mecab-0.996-ko-0.9.2/tests/katakana/test.gld\n","mecab-0.996-ko-0.9.2/tests/eval/\n","mecab-0.996-ko-0.9.2/tests/eval/answer\n","mecab-0.996-ko-0.9.2/tests/eval/system\n","mecab-0.996-ko-0.9.2/tests/eval/test.gld\n","mecab-0.996-ko-0.9.2/tests/shiin/\n","mecab-0.996-ko-0.9.2/tests/shiin/unk.def\n","mecab-0.996-ko-0.9.2/tests/shiin/dicrc\n","mecab-0.996-ko-0.9.2/tests/shiin/dic.csv\n","mecab-0.996-ko-0.9.2/tests/shiin/test\n","mecab-0.996-ko-0.9.2/tests/shiin/char.def\n","mecab-0.996-ko-0.9.2/tests/shiin/matrix.def\n","mecab-0.996-ko-0.9.2/tests/shiin/mkdic.pl\n","mecab-0.996-ko-0.9.2/tests/shiin/test.gld\n","mecab-0.996-ko-0.9.2/tests/latin/\n","mecab-0.996-ko-0.9.2/tests/latin/unk.def\n","mecab-0.996-ko-0.9.2/tests/latin/dicrc\n","mecab-0.996-ko-0.9.2/tests/latin/dic.csv\n","mecab-0.996-ko-0.9.2/tests/latin/test\n","mecab-0.996-ko-0.9.2/tests/latin/char.def\n","mecab-0.996-ko-0.9.2/tests/latin/matrix.def\n","mecab-0.996-ko-0.9.2/tests/latin/test.gld\n","mecab-0.996-ko-0.9.2/tests/chartype/\n","mecab-0.996-ko-0.9.2/tests/chartype/unk.def\n","mecab-0.996-ko-0.9.2/tests/chartype/dicrc\n","mecab-0.996-ko-0.9.2/tests/chartype/dic.csv\n","mecab-0.996-ko-0.9.2/tests/chartype/test\n","mecab-0.996-ko-0.9.2/tests/chartype/char.def\n","mecab-0.996-ko-0.9.2/tests/chartype/matrix.def\n","mecab-0.996-ko-0.9.2/tests/chartype/test.gld\n","mecab-0.996-ko-0.9.2/tests/run-dics.sh\n","mecab-0.996-ko-0.9.2/tests/ngram/\n","mecab-0.996-ko-0.9.2/tests/ngram/unk.def\n","mecab-0.996-ko-0.9.2/tests/ngram/dicrc\n","mecab-0.996-ko-0.9.2/tests/ngram/dic.csv\n","mecab-0.996-ko-0.9.2/tests/ngram/test\n","mecab-0.996-ko-0.9.2/tests/ngram/char.def\n","mecab-0.996-ko-0.9.2/tests/ngram/matrix.def\n","mecab-0.996-ko-0.9.2/tests/ngram/test.gld\n","mecab-0.996-ko-0.9.2/tests/Makefile.in\n","mecab-0.996-ko-0.9.2/ltmain.sh\n","mecab-0.996-ko-0.9.2/config.rpath\n","mecab-0.996-ko-0.9.2/config.h.in\n","mecab-0.996-ko-0.9.2/mecabrc.in\n","mecab-0.996-ko-0.9.2/GPL\n","mecab-0.996-ko-0.9.2/Makefile.train\n","mecab-0.996-ko-0.9.2/ChangeLog\n","mecab-0.996-ko-0.9.2/install-sh\n","mecab-0.996-ko-0.9.2/AUTHORS\n","mecab-0.996-ko-0.9.2/doc/\n","mecab-0.996-ko-0.9.2/doc/bindings.html\n","mecab-0.996-ko-0.9.2/doc/posid.html\n","mecab-0.996-ko-0.9.2/doc/unk.html\n","mecab-0.996-ko-0.9.2/doc/learn.html\n","mecab-0.996-ko-0.9.2/doc/format.html\n","mecab-0.996-ko-0.9.2/doc/libmecab.html\n","mecab-0.996-ko-0.9.2/doc/mecab.css\n","mecab-0.996-ko-0.9.2/doc/feature.html\n","mecab-0.996-ko-0.9.2/doc/Makefile.am\n","mecab-0.996-ko-0.9.2/doc/soft.html\n","mecab-0.996-ko-0.9.2/doc/en/\n","mecab-0.996-ko-0.9.2/doc/en/bindings.html\n","mecab-0.996-ko-0.9.2/doc/dic-detail.html\n","mecab-0.996-ko-0.9.2/doc/flow.png\n","mecab-0.996-ko-0.9.2/doc/mecab.html\n","mecab-0.996-ko-0.9.2/doc/index.html\n","mecab-0.996-ko-0.9.2/doc/result.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_a.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/globals_eval.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Tagger-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/functions_vars.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/doxygen.css\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_r.gif\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Lattice.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/functions.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Tagger.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h_source.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/tabs.css\n","mecab-0.996-ko-0.9.2/doc/doxygen/nav_f.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_b.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/globals.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/nav_h.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_h.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Model.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/globals_func.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/closed.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_l.gif\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__path__t-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/functions_func.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/globals_type.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Lattice-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__node__t.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers_func.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_s.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__dictionary__info__t-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers_type.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/classMeCab_1_1Model-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__dictionary__info__t.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/namespaces.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/namespacemembers.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/namespaceMeCab.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__path__t.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/files.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/structmecab__node__t-members.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/index.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/annotated.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/globals_defs.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/classes.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h-source.html\n","mecab-0.996-ko-0.9.2/doc/doxygen/doxygen.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/tab_b.gif\n","mecab-0.996-ko-0.9.2/doc/doxygen/bc_s.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/open.png\n","mecab-0.996-ko-0.9.2/doc/doxygen/mecab_8h.html\n","mecab-0.996-ko-0.9.2/doc/dic.html\n","mecab-0.996-ko-0.9.2/doc/partial.html\n","mecab-0.996-ko-0.9.2/doc/feature.png\n","mecab-0.996-ko-0.9.2/doc/Makefile.in\n","mecab-0.996-ko-0.9.2/missing\n","mecab-0.996-ko-0.9.2/BSD\n","mecab-0.996-ko-0.9.2/NEWS\n","mecab-0.996-ko-0.9.2/mkinstalldirs\n","mecab-0.996-ko-0.9.2/src/\n","mecab-0.996-ko-0.9.2/src/dictionary.h\n","mecab-0.996-ko-0.9.2/src/writer.h\n","mecab-0.996-ko-0.9.2/src/utils.h\n","mecab-0.996-ko-0.9.2/src/string_buffer.cpp\n","mecab-0.996-ko-0.9.2/src/tokenizer.cpp\n","mecab-0.996-ko-0.9.2/src/make.bat\n","mecab-0.996-ko-0.9.2/src/mecab.h\n","mecab-0.996-ko-0.9.2/src/freelist.h\n","mecab-0.996-ko-0.9.2/src/string_buffer.h\n","mecab-0.996-ko-0.9.2/src/learner_tagger.h\n","mecab-0.996-ko-0.9.2/src/dictionary_compiler.cpp\n","mecab-0.996-ko-0.9.2/src/eval.cpp\n","mecab-0.996-ko-0.9.2/src/mecab-system-eval.cpp\n","mecab-0.996-ko-0.9.2/src/darts.h\n","mecab-0.996-ko-0.9.2/src/param.h\n","mecab-0.996-ko-0.9.2/src/char_property.h\n","mecab-0.996-ko-0.9.2/src/learner_node.h\n","mecab-0.996-ko-0.9.2/src/mecab-dict-gen.cpp\n","mecab-0.996-ko-0.9.2/src/mecab-dict-index.cpp\n","mecab-0.996-ko-0.9.2/src/winmain.h\n","mecab-0.996-ko-0.9.2/src/thread.h\n","mecab-0.996-ko-0.9.2/src/context_id.cpp\n","mecab-0.996-ko-0.9.2/src/Makefile.am\n","mecab-0.996-ko-0.9.2/src/connector.h\n","mecab-0.996-ko-0.9.2/src/common.h\n","mecab-0.996-ko-0.9.2/src/dictionary_rewriter.cpp\n","mecab-0.996-ko-0.9.2/src/Makefile.msvc.in\n","mecab-0.996-ko-0.9.2/src/dictionary_rewriter.h\n","mecab-0.996-ko-0.9.2/src/feature_index.h\n","mecab-0.996-ko-0.9.2/src/iconv_utils.cpp\n","mecab-0.996-ko-0.9.2/src/char_property.cpp\n","mecab-0.996-ko-0.9.2/src/mecab-test-gen.cpp\n","mecab-0.996-ko-0.9.2/src/tagger.cpp\n","mecab-0.996-ko-0.9.2/src/mecab-cost-train.cpp\n","mecab-0.996-ko-0.9.2/src/learner.cpp\n","mecab-0.996-ko-0.9.2/src/dictionary.cpp\n","mecab-0.996-ko-0.9.2/src/lbfgs.cpp\n","mecab-0.996-ko-0.9.2/src/ucs.h\n","mecab-0.996-ko-0.9.2/src/writer.cpp\n","mecab-0.996-ko-0.9.2/src/learner_tagger.cpp\n","mecab-0.996-ko-0.9.2/src/lbfgs.h\n","mecab-0.996-ko-0.9.2/src/libmecab.cpp\n","mecab-0.996-ko-0.9.2/src/tokenizer.h\n","mecab-0.996-ko-0.9.2/src/mecab.cpp\n","mecab-0.996-ko-0.9.2/src/utils.cpp\n","mecab-0.996-ko-0.9.2/src/dictionary_generator.cpp\n","mecab-0.996-ko-0.9.2/src/param.cpp\n","mecab-0.996-ko-0.9.2/src/context_id.h\n","mecab-0.996-ko-0.9.2/src/mmap.h\n","mecab-0.996-ko-0.9.2/src/viterbi.h\n","mecab-0.996-ko-0.9.2/src/viterbi.cpp\n","mecab-0.996-ko-0.9.2/src/stream_wrapper.h\n","mecab-0.996-ko-0.9.2/src/feature_index.cpp\n","mecab-0.996-ko-0.9.2/src/nbest_generator.h\n","mecab-0.996-ko-0.9.2/src/ucstable.h\n","mecab-0.996-ko-0.9.2/src/nbest_generator.cpp\n","mecab-0.996-ko-0.9.2/src/iconv_utils.h\n","mecab-0.996-ko-0.9.2/src/connector.cpp\n","mecab-0.996-ko-0.9.2/src/Makefile.in\n","mecab-0.996-ko-0.9.2/src/scoped_ptr.h\n","mecab-0.996-ko-0.9.2/Makefile.in\n","+ cd mecab-0.996-ko-0.9.2\n","+ ./configure\n","checking for a BSD-compatible install... /usr/bin/install -c\n","checking whether build environment is sane... yes\n","checking for a thread-safe mkdir -p... /bin/mkdir -p\n","checking for gawk... no\n","checking for mawk... mawk\n","checking whether make sets $(MAKE)... yes\n","checking for gcc... gcc\n","checking whether the C compiler works... yes\n","checking for C compiler default output file name... a.out\n","checking for suffix of executables... \n","checking whether we are cross compiling... no\n","checking for suffix of object files... o\n","checking whether we are using the GNU C compiler... yes\n","checking whether gcc accepts -g... yes\n","checking for gcc option to accept ISO C89... none needed\n","checking for style of include used by make... GNU\n","checking dependency style of gcc... none\n","checking for g++... g++\n","checking whether we are using the GNU C++ compiler... yes\n","checking whether g++ accepts -g... yes\n","checking dependency style of g++... none\n","checking how to run the C preprocessor... gcc -E\n","checking for grep that handles long lines and -e... /bin/grep\n","checking for egrep... /bin/grep -E\n","checking whether gcc needs -traditional... no\n","checking whether make sets $(MAKE)... (cached) yes\n","checking build system type... x86_64-unknown-linux-gnu\n","checking host system type... x86_64-unknown-linux-gnu\n","checking how to print strings... printf\n","checking for a sed that does not truncate output... /bin/sed\n","checking for fgrep... /bin/grep -F\n","checking for ld used by gcc... /usr/bin/ld\n","checking if the linker (/usr/bin/ld) is GNU ld... yes\n","checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\n","checking the name lister (/usr/bin/nm -B) interface... BSD nm\n","checking whether ln -s works... yes\n","checking the maximum length of command line arguments... 1572864\n","checking whether the shell understands some XSI constructs... yes\n","checking whether the shell understands \"+=\"... yes\n","checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop\n","checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\n","checking for /usr/bin/ld option to reload object files... -r\n","checking for objdump... objdump\n","checking how to recognize dependent libraries... pass_all\n","checking for dlltool... dlltool\n","checking how to associate runtime and link libraries... printf %s\\n\n","checking for ar... ar\n","checking for archiver @FILE support... @\n","checking for strip... strip\n","checking for ranlib... ranlib\n","checking command to parse /usr/bin/nm -B output from gcc object... ok\n","checking for sysroot... no\n","./configure: line 7378: /usr/bin/file: No such file or directory\n","checking for mt... no\n","checking if : is a manifest tool... no\n","checking for ANSI C header files... yes\n","checking for sys/types.h... yes\n","checking for sys/stat.h... yes\n","checking for stdlib.h... yes\n","checking for string.h... yes\n","checking for memory.h... yes\n","checking for strings.h... yes\n","checking for inttypes.h... yes\n","checking for stdint.h... yes\n","checking for unistd.h... yes\n","checking for dlfcn.h... yes\n","checking for objdir... .libs\n","checking if gcc supports -fno-rtti -fno-exceptions... no\n","checking for gcc option to produce PIC... -fPIC -DPIC\n","checking if gcc PIC flag -fPIC -DPIC works... yes\n","checking if gcc static flag -static works... yes\n","checking if gcc supports -c -o file.o... yes\n","checking if gcc supports -c -o file.o... (cached) yes\n","checking whether the gcc linker (/usr/bin/ld) supports shared libraries... yes\n","checking whether -lc should be explicitly linked in... no\n","checking dynamic linker characteristics... GNU/Linux ld.so\n","checking how to hardcode library paths into programs... immediate\n","checking whether stripping libraries is possible... yes\n","checking if libtool supports shared libraries... yes\n","checking whether to build shared libraries... yes\n","checking whether to build static libraries... yes\n","checking how to run the C++ preprocessor... g++ -E\n","checking for ld used by g++... /usr/bin/ld\n","checking if the linker (/usr/bin/ld) is GNU ld... yes\n","checking whether the g++ linker (/usr/bin/ld) supports shared libraries... yes\n","checking for g++ option to produce PIC... -fPIC -DPIC\n","checking if g++ PIC flag -fPIC -DPIC works... yes\n","checking if g++ static flag -static works... yes\n","checking if g++ supports -c -o file.o... yes\n","checking if g++ supports -c -o file.o... (cached) yes\n","checking whether the g++ linker (/usr/bin/ld) supports shared libraries... yes\n","checking dynamic linker characteristics... (cached) GNU/Linux ld.so\n","checking how to hardcode library paths into programs... immediate\n","checking for library containing strerror... none required\n","checking whether byte ordering is bigendian... no\n","checking for ld used by GCC... /usr/bin/ld\n","checking if the linker (/usr/bin/ld) is GNU ld... yes\n","checking for shared library run path origin... done\n","checking for iconv... yes\n","checking for working iconv... yes\n","checking for iconv declaration... \n","         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\n","checking for ANSI C header files... (cached) yes\n","checking for an ANSI C-conforming const... yes\n","checking whether byte ordering is bigendian... (cached) no\n","checking for string.h... (cached) yes\n","checking for stdlib.h... (cached) yes\n","checking for unistd.h... (cached) yes\n","checking fcntl.h usability... yes\n","checking fcntl.h presence... yes\n","checking for fcntl.h... yes\n","checking for stdint.h... (cached) yes\n","checking for sys/stat.h... (cached) yes\n","checking sys/mman.h usability... yes\n","checking sys/mman.h presence... yes\n","checking for sys/mman.h... yes\n","checking sys/times.h usability... yes\n","checking sys/times.h presence... yes\n","checking for sys/times.h... yes\n","checking for sys/types.h... (cached) yes\n","checking dirent.h usability... yes\n","checking dirent.h presence... yes\n","checking for dirent.h... yes\n","checking ctype.h usability... yes\n","checking ctype.h presence... yes\n","checking for ctype.h... yes\n","checking for sys/types.h... (cached) yes\n","checking io.h usability... no\n","checking io.h presence... no\n","checking for io.h... no\n","checking windows.h usability... no\n","checking windows.h presence... no\n","checking for windows.h... no\n","checking pthread.h usability... yes\n","checking pthread.h presence... yes\n","checking for pthread.h... yes\n","checking for off_t... yes\n","checking for size_t... yes\n","checking size of char... 1\n","checking size of short... 2\n","checking size of int... 4\n","checking size of long... 8\n","checking size of long long... 8\n","checking size of size_t... 8\n","checking for size_t... (cached) yes\n","checking for unsigned long long int... yes\n","checking for stdlib.h... (cached) yes\n","checking for unistd.h... (cached) yes\n","checking for sys/param.h... yes\n","checking for getpagesize... yes\n","checking for working mmap... yes\n","checking for main in -lstdc++... yes\n","checking for pthread_create in -lpthread... yes\n","checking for pthread_join in -lpthread... yes\n","checking for getenv... yes\n","checking for opendir... yes\n","checking whether make is GNU Make... yes\n","checking if g++ supports stl <vector> (required)... yes\n","checking if g++ supports stl <list> (required)... yes\n","checking if g++ supports stl <map> (required)... yes\n","checking if g++ supports stl <set> (required)... yes\n","checking if g++ supports stl <queue> (required)... yes\n","checking if g++ supports stl <functional> (required)... yes\n","checking if g++ supports stl <algorithm> (required)... yes\n","checking if g++ supports stl <string> (required)... yes\n","checking if g++ supports stl <iostream> (required)... yes\n","checking if g++ supports stl <sstream> (required)... yes\n","checking if g++ supports stl <fstream> (required)... yes\n","checking if g++ supports template <class T> (required)... yes\n","checking if g++ supports const_cast<> (required)... yes\n","checking if g++ supports static_cast<> (required)... yes\n","checking if g++ supports reinterpret_cast<> (required)... yes\n","checking if g++ supports namespaces (required) ... yes\n","checking if g++ supports __thread (optional)... yes\n","checking if g++ supports template <class T> (required)... yes\n","checking if g++ supports GCC native atomic operations (optional)... yes\n","checking if g++ supports OSX native atomic operations (optional)... no\n","checking if g++ environment provides all required features... yes\n","configure: creating ./config.status\n","config.status: creating Makefile\n","config.status: creating src/Makefile\n","config.status: creating src/Makefile.msvc\n","config.status: creating man/Makefile\n","config.status: creating doc/Makefile\n","config.status: creating tests/Makefile\n","config.status: creating swig/version.h\n","config.status: creating mecab.iss\n","config.status: creating mecab-config\n","config.status: creating mecabrc\n","config.status: creating config.h\n","config.status: executing depfiles commands\n","config.status: executing libtool commands\n","config.status: executing default commands\n","+ make\n","make  all-recursive\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n","Making all in src\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o viterbi.lo viterbi.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c viterbi.cpp  -fPIC -DPIC -o .libs/viterbi.o\n","In file included from \u001b[01m\u001b[Kviterbi.cpp:14:0\u001b[m\u001b[K:\n","\u001b[01m\u001b[Kparam.h:30:13:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K'\u001b[01m\u001b[KTarget {anonymous}::lexical_cast(Source) [with Target = std::__cxx11::basic_string<char>; Source = std::__cxx11::basic_string<char>]\u001b[m\u001b[K' defined but not used [\u001b[01;35m\u001b[K-Wunused-function\u001b[m\u001b[K]\n"," std::string \u001b[01;35m\u001b[Klexical_cast<std::string, std::string>\u001b[m\u001b[K(std::string arg) {\n","             \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c viterbi.cpp -o viterbi.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o tagger.lo tagger.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tagger.cpp  -fPIC -DPIC -o .libs/tagger.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tagger.cpp -o tagger.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o utils.lo utils.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c utils.cpp  -fPIC -DPIC -o .libs/utils.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c utils.cpp -o utils.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o eval.lo eval.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c eval.cpp  -fPIC -DPIC -o .libs/eval.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c eval.cpp -o eval.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o iconv_utils.lo iconv_utils.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c iconv_utils.cpp  -fPIC -DPIC -o .libs/iconv_utils.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c iconv_utils.cpp -o iconv_utils.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_rewriter.lo dictionary_rewriter.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_rewriter.cpp  -fPIC -DPIC -o .libs/dictionary_rewriter.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_rewriter.cpp -o dictionary_rewriter.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_generator.lo dictionary_generator.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_generator.cpp  -fPIC -DPIC -o .libs/dictionary_generator.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_generator.cpp -o dictionary_generator.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary_compiler.lo dictionary_compiler.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_compiler.cpp  -fPIC -DPIC -o .libs/dictionary_compiler.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary_compiler.cpp -o dictionary_compiler.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o context_id.lo context_id.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c context_id.cpp  -fPIC -DPIC -o .libs/context_id.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c context_id.cpp -o context_id.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o connector.lo connector.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c connector.cpp  -fPIC -DPIC -o .libs/connector.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c connector.cpp -o connector.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o nbest_generator.lo nbest_generator.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c nbest_generator.cpp  -fPIC -DPIC -o .libs/nbest_generator.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c nbest_generator.cpp -o nbest_generator.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o writer.lo writer.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c writer.cpp  -fPIC -DPIC -o .libs/writer.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c writer.cpp -o writer.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o string_buffer.lo string_buffer.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c string_buffer.cpp  -fPIC -DPIC -o .libs/string_buffer.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c string_buffer.cpp -o string_buffer.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o param.lo param.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c param.cpp  -fPIC -DPIC -o .libs/param.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c param.cpp -o param.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o tokenizer.lo tokenizer.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tokenizer.cpp  -fPIC -DPIC -o .libs/tokenizer.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c tokenizer.cpp -o tokenizer.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o char_property.lo char_property.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c char_property.cpp  -fPIC -DPIC -o .libs/char_property.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c char_property.cpp -o char_property.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o dictionary.lo dictionary.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary.cpp  -fPIC -DPIC -o .libs/dictionary.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c dictionary.cpp -o dictionary.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o feature_index.lo feature_index.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c feature_index.cpp  -fPIC -DPIC -o .libs/feature_index.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c feature_index.cpp -o feature_index.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o lbfgs.lo lbfgs.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c lbfgs.cpp  -fPIC -DPIC -o .libs/lbfgs.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c lbfgs.cpp -o lbfgs.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o learner_tagger.lo learner_tagger.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner_tagger.cpp  -fPIC -DPIC -o .libs/learner_tagger.o\n","\u001b[01m\u001b[Klearner_tagger.cpp:25:7:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K'\u001b[01m\u001b[Kchar* MeCab::{anonymous}::mystrdup(const string&)\u001b[m\u001b[K' defined but not used [\u001b[01;35m\u001b[K-Wunused-function\u001b[m\u001b[K]\n"," char *\u001b[01;35m\u001b[Kmystrdup\u001b[m\u001b[K(const std::string &str) {\n","       \u001b[01;35m\u001b[K^~~~~~~~\u001b[m\u001b[K\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner_tagger.cpp -o learner_tagger.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o learner.lo learner.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner.cpp  -fPIC -DPIC -o .libs/learner.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c learner.cpp -o learner.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=compile g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o libmecab.lo libmecab.cpp\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c libmecab.cpp  -fPIC -DPIC -o .libs/libmecab.o\n","libtool: compile:  g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102 -DMECAB_DEFAULT_RC=\\\"/usr/local/etc/mecabrc\\\" -O3 -Wall -c libmecab.cpp -o libmecab.o >/dev/null 2>&1\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall  -no-undefined -version-info 2:0:0  -o libmecab.la -rpath /usr/local/lib viterbi.lo tagger.lo utils.lo eval.lo iconv_utils.lo dictionary_rewriter.lo dictionary_generator.lo dictionary_compiler.lo context_id.lo connector.lo nbest_generator.lo writer.lo string_buffer.lo param.lo tokenizer.lo char_property.lo dictionary.lo feature_index.lo lbfgs.lo learner_tagger.lo learner.lo libmecab.lo  -lpthread -lpthread  -lstdc++ \n","libtool: link: g++  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o  .libs/viterbi.o .libs/tagger.o .libs/utils.o .libs/eval.o .libs/iconv_utils.o .libs/dictionary_rewriter.o .libs/dictionary_generator.o .libs/dictionary_compiler.o .libs/context_id.o .libs/connector.o .libs/nbest_generator.o .libs/writer.o .libs/string_buffer.o .libs/param.o .libs/tokenizer.o .libs/char_property.o .libs/dictionary.o .libs/feature_index.o .libs/lbfgs.o .libs/learner_tagger.o .libs/learner.o .libs/libmecab.o   -lpthread -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/local/cuda/lib64/stubs -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o  -O3   -Wl,-soname -Wl,libmecab.so.2 -o .libs/libmecab.so.2.0.0\n","libtool: link: (cd \".libs\" && rm -f \"libmecab.so.2\" && ln -s \"libmecab.so.2.0.0\" \"libmecab.so.2\")\n","libtool: link: (cd \".libs\" && rm -f \"libmecab.so\" && ln -s \"libmecab.so.2.0.0\" \"libmecab.so\")\n","libtool: link: ar cru .libs/libmecab.a  viterbi.o tagger.o utils.o eval.o iconv_utils.o dictionary_rewriter.o dictionary_generator.o dictionary_compiler.o context_id.o connector.o nbest_generator.o writer.o string_buffer.o param.o tokenizer.o char_property.o dictionary.o feature_index.o lbfgs.o learner_tagger.o learner.o libmecab.o\n","ar: `u' modifier ignored since `D' is the default (see `U')\n","libtool: link: ranlib .libs/libmecab.a\n","libtool: link: ( cd \".libs\" && rm -f \"libmecab.la\" && ln -s \"../libmecab.la\" \"libmecab.la\" )\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab.o mecab.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab mecab.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab mecab.o  ./.libs/libmecab.so -lpthread -lstdc++\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-dict-index.o mecab-dict-index.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-dict-index mecab-dict-index.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab-dict-index mecab-dict-index.o  ./.libs/libmecab.so -lpthread -lstdc++\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-dict-gen.o mecab-dict-gen.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-dict-gen mecab-dict-gen.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab-dict-gen mecab-dict-gen.o  ./.libs/libmecab.so -lpthread -lstdc++\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-cost-train.o mecab-cost-train.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-cost-train mecab-cost-train.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab-cost-train mecab-cost-train.o  ./.libs/libmecab.so -lpthread -lstdc++\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-system-eval.o mecab-system-eval.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-system-eval mecab-system-eval.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab-system-eval mecab-system-eval.o  ./.libs/libmecab.so -lpthread -lstdc++\n","g++ -DHAVE_CONFIG_H -I. -I.. -DDIC_VERSION=102   -DMECAB_DEFAULT_RC=\"\\\"/usr/local/etc/mecabrc\\\"\"    -O3 -Wall  -c -o mecab-test-gen.o mecab-test-gen.cpp\n","/bin/bash ../libtool --tag=CXX   --mode=link g++  -O3 -Wall    -o mecab-test-gen mecab-test-gen.o libmecab.la -lpthread -lpthread  -lstdc++ \n","libtool: link: g++ -O3 -Wall -o .libs/mecab-test-gen mecab-test-gen.o  ./.libs/libmecab.so -lpthread -lstdc++\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","Making all in man\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","make[2]: Nothing to be done for 'all'.\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","Making all in doc\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","make[2]: Nothing to be done for 'all'.\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","Making all in tests\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[2]: Nothing to be done for 'all'.\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n","+ make check\n","Making check in src\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","make[1]: Nothing to be done for 'check'.\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","Making check in man\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","make[1]: Nothing to be done for 'check'.\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","Making check in doc\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","make[1]: Nothing to be done for 'check'.\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","Making check in tests\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make  check-TESTS\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 177\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 178x178\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 83\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 84x84\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 450\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 1x1\n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 162\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 3x3\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 4\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 1x1\n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 11\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 1\n","reading ./matrix.def ... 1x1\n","\n","done!\n","./pos-id.def is not found. minimum setting is used\n","reading ./unk.def ... 2\n","emitting double-array: 100% |###########################################| \n","./model.def is not found. skipped.\n","./pos-id.def is not found. minimum setting is used\n","reading ./dic.csv ... 1\n","reading ./matrix.def ... 1x1\n","\n","done!\n","PASS: run-dics.sh\n","PASS: run-eval.sh\n","seed/pos-id.def is not found. minimum setting is used\n","reading seed/unk.def ... 40\n","emitting double-array: 100% |###########################################| \n","seed/model.def is not found. skipped.\n","seed/pos-id.def is not found. minimum setting is used\n","reading seed/dic.csv ... 4335\n","emitting double-array: 100% |###########################################| \n","reading seed/matrix.def ... 1x1\n","\n","done!\n","reading corpus ...\n","Number of sentences: 34\n","Number of features:  64108\n","eta:                 0.00005\n","freq:                1\n","eval-size:           6\n","unk-eval-size:       4\n","threads:             1\n","charset:             EUC-JP\n","C(sigma^2):          1.00000\n","\n","iter=0 err=1.00000 F=0.35771 target=2406.28355 diff=1.00000\n","iter=1 err=0.97059 F=0.65652 target=1484.25231 diff=0.38318\n","iter=2 err=0.91176 F=0.79331 target=863.32765 diff=0.41834\n","iter=3 err=0.85294 F=0.89213 target=596.72480 diff=0.30881\n","iter=4 err=0.61765 F=0.95467 target=336.30744 diff=0.43641\n","iter=5 err=0.50000 F=0.96702 target=246.53039 diff=0.26695\n","iter=6 err=0.35294 F=0.95472 target=188.93963 diff=0.23361\n","iter=7 err=0.20588 F=0.99106 target=168.62665 diff=0.10751\n","iter=8 err=0.05882 F=0.99777 target=158.64865 diff=0.05917\n","iter=9 err=0.08824 F=0.99665 target=154.14530 diff=0.02839\n","iter=10 err=0.08824 F=0.99665 target=151.94257 diff=0.01429\n","iter=11 err=0.02941 F=0.99888 target=147.20825 diff=0.03116\n","iter=12 err=0.00000 F=1.00000 target=147.34956 diff=0.00096\n","iter=13 err=0.02941 F=0.99888 target=146.32592 diff=0.00695\n","iter=14 err=0.00000 F=1.00000 target=145.77299 diff=0.00378\n","iter=15 err=0.02941 F=0.99888 target=145.24641 diff=0.00361\n","iter=16 err=0.00000 F=1.00000 target=144.96490 diff=0.00194\n","iter=17 err=0.02941 F=0.99888 target=144.90246 diff=0.00043\n","iter=18 err=0.00000 F=1.00000 target=144.75959 diff=0.00099\n","iter=19 err=0.00000 F=1.00000 target=144.71727 diff=0.00029\n","iter=20 err=0.00000 F=1.00000 target=144.66337 diff=0.00037\n","iter=21 err=0.00000 F=1.00000 target=144.61349 diff=0.00034\n","iter=22 err=0.00000 F=1.00000 target=144.62987 diff=0.00011\n","iter=23 err=0.00000 F=1.00000 target=144.60060 diff=0.00020\n","iter=24 err=0.00000 F=1.00000 target=144.59125 diff=0.00006\n","iter=25 err=0.00000 F=1.00000 target=144.58619 diff=0.00004\n","iter=26 err=0.00000 F=1.00000 target=144.58219 diff=0.00003\n","iter=27 err=0.00000 F=1.00000 target=144.58059 diff=0.00001\n","\n","Done! writing model file ... \n","model-ipadic.c1.0.f1.model is not a binary model. reopen it as text mode...\n","reading seed/unk.def ... 40\n","reading seed/dic.csv ... 4335\n","emitting model-ipadic.c1.0.f1.dic/left-id.def/ model-ipadic.c1.0.f1.dic/right-id.def\n","emitting model-ipadic.c1.0.f1.dic/unk.def ... 40\n","emitting model-ipadic.c1.0.f1.dic/dic.csv ... 4335\n","emitting matrix      : 100% |###########################################| \n","copying seed/char.def to model-ipadic.c1.0.f1.dic/char.def\n","copying seed/rewrite.def to model-ipadic.c1.0.f1.dic/rewrite.def\n","copying seed/dicrc to model-ipadic.c1.0.f1.dic/dicrc\n","copying seed/feature.def to model-ipadic.c1.0.f1.dic/feature.def\n","copying model-ipadic.c1.0.f1.model to model-ipadic.c1.0.f1.dic/model.def\n","\n","done!\n","model-ipadic.c1.0.f1.dic/pos-id.def is not found. minimum setting is used\n","reading model-ipadic.c1.0.f1.dic/unk.def ... 40\n","emitting double-array: 100% |###########################################| \n","model-ipadic.c1.0.f1.dic/pos-id.def is not found. minimum setting is used\n","reading model-ipadic.c1.0.f1.dic/dic.csv ... 4335\n","emitting double-array: 100% |###########################################| \n","reading model-ipadic.c1.0.f1.dic/matrix.def ... 346x346\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","              precision          recall         F\n","LEVEL 0:    12.8959(57/442) 11.8998(57/479) 12.3779\n","LEVEL 1:    12.2172(54/442) 11.2735(54/479) 11.7264\n","LEVEL 2:    11.7647(52/442) 10.8559(52/479) 11.2921\n","LEVEL 4:    11.7647(52/442) 10.8559(52/479) 11.2921\n","PASS: run-cost-train.sh\n","==================\n","All 3 tests passed\n","==================\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n","+ sudo make install\n","Making install in src\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","test -z \"/usr/local/lib\" || /bin/mkdir -p \"/usr/local/lib\"\n"," /bin/bash ../libtool   --mode=install /usr/bin/install -c   libmecab.la '/usr/local/lib'\n","libtool: install: /usr/bin/install -c .libs/libmecab.so.2.0.0 /usr/local/lib/libmecab.so.2.0.0\n","libtool: install: (cd /usr/local/lib && { ln -s -f libmecab.so.2.0.0 libmecab.so.2 || { rm -f libmecab.so.2 && ln -s libmecab.so.2.0.0 libmecab.so.2; }; })\n","libtool: install: (cd /usr/local/lib && { ln -s -f libmecab.so.2.0.0 libmecab.so || { rm -f libmecab.so && ln -s libmecab.so.2.0.0 libmecab.so; }; })\n","libtool: install: /usr/bin/install -c .libs/libmecab.lai /usr/local/lib/libmecab.la\n","libtool: install: /usr/bin/install -c .libs/libmecab.a /usr/local/lib/libmecab.a\n","libtool: install: chmod 644 /usr/local/lib/libmecab.a\n","libtool: install: ranlib /usr/local/lib/libmecab.a\n","libtool: finish: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/sbin\" ldconfig -n /usr/local/lib\n","----------------------------------------------------------------------\n","Libraries have been installed in:\n","   /usr/local/lib\n","\n","If you ever happen to want to link against installed libraries\n","in a given directory, LIBDIR, you must either use libtool, and\n","specify the full pathname of the library, or use the `-LLIBDIR'\n","flag during linking and do at least one of the following:\n","   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable\n","     during execution\n","   - add LIBDIR to the `LD_RUN_PATH' environment variable\n","     during linking\n","   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag\n","   - have your system administrator add LIBDIR to `/etc/ld.so.conf'\n","\n","See any operating system documentation about shared libraries for\n","more information, such as the ld(1) and ld.so(8) manual pages.\n","----------------------------------------------------------------------\n","test -z \"/usr/local/bin\" || /bin/mkdir -p \"/usr/local/bin\"\n","  /bin/bash ../libtool   --mode=install /usr/bin/install -c mecab '/usr/local/bin'\n","libtool: install: /usr/bin/install -c .libs/mecab /usr/local/bin/mecab\n","test -z \"/usr/local/libexec/mecab\" || /bin/mkdir -p \"/usr/local/libexec/mecab\"\n","  /bin/bash ../libtool   --mode=install /usr/bin/install -c mecab-dict-index mecab-dict-gen mecab-cost-train mecab-system-eval mecab-test-gen '/usr/local/libexec/mecab'\n","libtool: install: /usr/bin/install -c .libs/mecab-dict-index /usr/local/libexec/mecab/mecab-dict-index\n","libtool: install: /usr/bin/install -c .libs/mecab-dict-gen /usr/local/libexec/mecab/mecab-dict-gen\n","libtool: install: /usr/bin/install -c .libs/mecab-cost-train /usr/local/libexec/mecab/mecab-cost-train\n","libtool: install: /usr/bin/install -c .libs/mecab-system-eval /usr/local/libexec/mecab/mecab-system-eval\n","libtool: install: /usr/bin/install -c .libs/mecab-test-gen /usr/local/libexec/mecab/mecab-test-gen\n","test -z \"/usr/local/include\" || /bin/mkdir -p \"/usr/local/include\"\n"," /usr/bin/install -c -m 644 mecab.h '/usr/local/include'\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/src'\n","Making install in man\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","make[2]: Nothing to be done for 'install-exec-am'.\n","test -z \"/usr/local/share/man/man1\" || /bin/mkdir -p \"/usr/local/share/man/man1\"\n"," /usr/bin/install -c -m 644 mecab.1 '/usr/local/share/man/man1'\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/man'\n","Making install in doc\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","make[2]: Nothing to be done for 'install-exec-am'.\n","make[2]: Nothing to be done for 'install-data-am'.\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/doc'\n","Making install in tests\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[2]: Nothing to be done for 'install-exec-am'.\n","make[2]: Nothing to be done for 'install-data-am'.\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2/tests'\n","make[1]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n","make[2]: Entering directory '/tmp/mecab-0.996-ko-0.9.2'\n","test -z \"/usr/local/bin\" || /bin/mkdir -p \"/usr/local/bin\"\n"," /usr/bin/install -c mecab-config '/usr/local/bin'\n","test -z \"/usr/local/etc\" || /bin/mkdir -p \"/usr/local/etc\"\n"," /usr/bin/install -c -m 644 mecabrc '/usr/local/etc'\n","make[2]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n","make[1]: Leaving directory '/tmp/mecab-0.996-ko-0.9.2'\n","+ [[ -d /usr/local/lib/mecab/dic/mecab-ko-dic ]]\n","+ echo 'Install mecab-ko-dic'\n","Install mecab-ko-dic\n","+ install_mecab_ko_dic\n","+ echo 'Install mecab-ko-dic'\n","Install mecab-ko-dic\n","+ cd /tmp\n","+ curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.1.1-20180720.tar.gz\n","  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","100 47.4M  100 47.4M    0     0  21.6M      0  0:00:02  0:00:02 --:--:-- 35.2M\n","+ tar -zxvf mecab-ko-dic-2.1.1-20180720.tar.gz\n","mecab-ko-dic-2.1.1-20180720/\n","mecab-ko-dic-2.1.1-20180720/configure\n","mecab-ko-dic-2.1.1-20180720/COPYING\n","mecab-ko-dic-2.1.1-20180720/autogen.sh\n","mecab-ko-dic-2.1.1-20180720/Place-station.csv\n","mecab-ko-dic-2.1.1-20180720/NNG.csv\n","mecab-ko-dic-2.1.1-20180720/README\n","mecab-ko-dic-2.1.1-20180720/EF.csv\n","mecab-ko-dic-2.1.1-20180720/MAG.csv\n","mecab-ko-dic-2.1.1-20180720/Preanalysis.csv\n","mecab-ko-dic-2.1.1-20180720/NNB.csv\n","mecab-ko-dic-2.1.1-20180720/Person-actor.csv\n","mecab-ko-dic-2.1.1-20180720/VV.csv\n","mecab-ko-dic-2.1.1-20180720/Makefile.in\n","mecab-ko-dic-2.1.1-20180720/matrix.def\n","mecab-ko-dic-2.1.1-20180720/EC.csv\n","mecab-ko-dic-2.1.1-20180720/NNBC.csv\n","mecab-ko-dic-2.1.1-20180720/clean\n","mecab-ko-dic-2.1.1-20180720/ChangeLog\n","mecab-ko-dic-2.1.1-20180720/J.csv\n","mecab-ko-dic-2.1.1-20180720/.keep\n","mecab-ko-dic-2.1.1-20180720/feature.def\n","mecab-ko-dic-2.1.1-20180720/Foreign.csv\n","mecab-ko-dic-2.1.1-20180720/XPN.csv\n","mecab-ko-dic-2.1.1-20180720/EP.csv\n","mecab-ko-dic-2.1.1-20180720/NR.csv\n","mecab-ko-dic-2.1.1-20180720/left-id.def\n","mecab-ko-dic-2.1.1-20180720/Place.csv\n","mecab-ko-dic-2.1.1-20180720/Symbol.csv\n","mecab-ko-dic-2.1.1-20180720/dicrc\n","mecab-ko-dic-2.1.1-20180720/NP.csv\n","mecab-ko-dic-2.1.1-20180720/ETM.csv\n","mecab-ko-dic-2.1.1-20180720/IC.csv\n","mecab-ko-dic-2.1.1-20180720/Place-address.csv\n","mecab-ko-dic-2.1.1-20180720/Group.csv\n","mecab-ko-dic-2.1.1-20180720/model.def\n","mecab-ko-dic-2.1.1-20180720/XSN.csv\n","mecab-ko-dic-2.1.1-20180720/INSTALL\n","mecab-ko-dic-2.1.1-20180720/rewrite.def\n","mecab-ko-dic-2.1.1-20180720/Inflect.csv\n","mecab-ko-dic-2.1.1-20180720/configure.ac\n","mecab-ko-dic-2.1.1-20180720/NNP.csv\n","mecab-ko-dic-2.1.1-20180720/CoinedWord.csv\n","mecab-ko-dic-2.1.1-20180720/XSV.csv\n","mecab-ko-dic-2.1.1-20180720/pos-id.def\n","mecab-ko-dic-2.1.1-20180720/Makefile.am\n","mecab-ko-dic-2.1.1-20180720/unk.def\n","mecab-ko-dic-2.1.1-20180720/missing\n","mecab-ko-dic-2.1.1-20180720/VCP.csv\n","mecab-ko-dic-2.1.1-20180720/install-sh\n","mecab-ko-dic-2.1.1-20180720/Hanja.csv\n","mecab-ko-dic-2.1.1-20180720/MAJ.csv\n","mecab-ko-dic-2.1.1-20180720/XSA.csv\n","mecab-ko-dic-2.1.1-20180720/Wikipedia.csv\n","mecab-ko-dic-2.1.1-20180720/tools/\n","mecab-ko-dic-2.1.1-20180720/tools/add-userdic.sh\n","mecab-ko-dic-2.1.1-20180720/tools/mecab-bestn.sh\n","mecab-ko-dic-2.1.1-20180720/tools/convert_for_using_store.sh\n","mecab-ko-dic-2.1.1-20180720/user-dic/\n","mecab-ko-dic-2.1.1-20180720/user-dic/nnp.csv\n","mecab-ko-dic-2.1.1-20180720/user-dic/place.csv\n","mecab-ko-dic-2.1.1-20180720/user-dic/person.csv\n","mecab-ko-dic-2.1.1-20180720/user-dic/README.md\n","mecab-ko-dic-2.1.1-20180720/NorthKorea.csv\n","mecab-ko-dic-2.1.1-20180720/VX.csv\n","mecab-ko-dic-2.1.1-20180720/right-id.def\n","mecab-ko-dic-2.1.1-20180720/VA.csv\n","mecab-ko-dic-2.1.1-20180720/char.def\n","mecab-ko-dic-2.1.1-20180720/NEWS\n","mecab-ko-dic-2.1.1-20180720/MM.csv\n","mecab-ko-dic-2.1.1-20180720/ETN.csv\n","mecab-ko-dic-2.1.1-20180720/AUTHORS\n","mecab-ko-dic-2.1.1-20180720/Person.csv\n","mecab-ko-dic-2.1.1-20180720/XR.csv\n","mecab-ko-dic-2.1.1-20180720/VCN.csv\n","+ cd mecab-ko-dic-2.1.1-20180720\n","+ ./autogen.sh\n","Looking in current directory for macros.\n","configure.ac:2: warning: AM_INIT_AUTOMAKE: two- and three-arguments forms are deprecated.  For more info, see:\n","configure.ac:2: http://www.gnu.org/software/automake/manual/automake.html#Modernize-AM_005fINIT_005fAUTOMAKE-invocation\n","+ ./configure\n","checking for a BSD-compatible install... /usr/bin/install -c\n","checking whether build environment is sane... yes\n","/tmp/mecab-ko-dic-2.1.1-20180720/missing: Unknown `--is-lightweight' option\n","Try `/tmp/mecab-ko-dic-2.1.1-20180720/missing --help' for more information\n","configure: WARNING: 'missing' script is too old or missing\n","checking for a thread-safe mkdir -p... /bin/mkdir -p\n","checking for gawk... no\n","checking for mawk... mawk\n","checking whether make sets $(MAKE)... yes\n","checking whether make supports nested variables... yes\n","checking for mecab-config... /usr/local/bin/mecab-config\n","checking that generated files are newer than configure... done\n","configure: creating ./config.status\n","config.status: creating Makefile\n","+ [[ Linux == \\L\\i\\n\\u\\x ]]\n","+ mecab-config --libs-only-L\n","+ sudo tee /etc/ld.so.conf.d/mecab.conf\n","/usr/local/lib\n","+ sudo ldconfig\n","/sbin/ldconfig.real: /usr/local/lib/python3.7/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n","\n","+ make\n","/usr/local/libexec/mecab/mecab-dict-index -d . -o . -f UTF-8 -t UTF-8\n","reading ./unk.def ... 13\n","emitting double-array: 100% |###########################################| \n","reading ./Wikipedia.csv ... 36762\n","reading ./Person.csv ... 196459\n","reading ./VCP.csv ... 9\n","reading ./NNG.csv ... 208524\n","reading ./EP.csv ... 51\n","reading ./EC.csv ... 2547\n","reading ./EF.csv ... 1820\n","reading ./XR.csv ... 3637\n","reading ./Place-address.csv ... 19301\n","reading ./MAG.csv ... 14242\n","reading ./Place.csv ... 30303\n","reading ./Group.csv ... 3176\n","reading ./VV.csv ... 7331\n","reading ./NR.csv ... 482\n","reading ./NorthKorea.csv ... 3\n","reading ./Hanja.csv ... 125750\n","reading ./Place-station.csv ... 1145\n","reading ./NP.csv ... 342\n","reading ./MM.csv ... 453\n","reading ./Inflect.csv ... 44820\n","reading ./NNB.csv ... 140\n","reading ./XSA.csv ... 19\n","reading ./VCN.csv ... 7\n","reading ./VX.csv ... 125\n","reading ./Person-actor.csv ... 99230\n","reading ./J.csv ... 416\n","reading ./ETN.csv ... 14\n","reading ./XSV.csv ... 23\n","reading ./CoinedWord.csv ... 148\n","reading ./VA.csv ... 2360\n","reading ./NNP.csv ... 2371\n","reading ./ETM.csv ... 133\n","reading ./XSN.csv ... 124\n","reading ./Symbol.csv ... 16\n","reading ./NNBC.csv ... 677\n","reading ./Preanalysis.csv ... 5\n","reading ./IC.csv ... 1305\n","reading ./XPN.csv ... 83\n","reading ./Foreign.csv ... 11690\n","reading ./MAJ.csv ... 240\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 3822x2693\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","echo To enable dictionary, rewrite /usr/local/etc/mecabrc as \\\"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\\\"\n","To enable dictionary, rewrite /usr/local/etc/mecabrc as \"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\"\n","+ sudo sh -c 'echo \"dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic\" > /usr/local/etc/mecabrc'\n","+ sudo make install\n","make[1]: Entering directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n","make[1]: Nothing to be done for 'install-exec-am'.\n"," /bin/mkdir -p '/usr/local/lib/mecab/dic/mecab-ko-dic'\n"," /usr/bin/install -c -m 644 model.bin matrix.bin char.bin sys.dic unk.dic left-id.def right-id.def rewrite.def pos-id.def dicrc '/usr/local/lib/mecab/dic/mecab-ko-dic'\n","make[1]: Leaving directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n","++ python3 -c 'import pkgutil; print(1 if pkgutil.find_loader(\"MeCab\") else 0)'\n","+ [[ 0 == \\1 ]]\n","+ echo 'Install mecab-python'\n","Install mecab-python\n","+ install_mecab_python\n","+ pushd /tmp\n","/tmp /tmp/mecab-ko-dic-2.1.1-20180720\n","+ [[ ! -d mecab-python-0.996 ]]\n","+ git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git\n","Cloning into 'mecab-python-0.996'...\n","remote: Counting objects: 17, done.\u001b[K\n","remote: Compressing objects: 100% (16/16), done.\u001b[K\n","remote: Total 17 (delta 3), reused 0 (delta 0)\u001b[K\n","Unpacking objects: 100% (17/17), done.\n","+ popd\n","/tmp/mecab-ko-dic-2.1.1-20180720\n","+ python3 -m pip install /tmp/mecab-python-0.996\n","Processing /tmp/mecab-python-0.996\n","Building wheels for collected packages: mecab-python\n","  Building wheel for mecab-python (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mecab-python: filename=mecab_python-0.996_ko_0.9.2-cp37-cp37m-linux_x86_64.whl size=141802 sha256=55605511c9daf6e05faf264ca6bc40adb65a1af444d0283ee10b82780b296333\n","  Stored in directory: /root/.cache/pip/wheels/99/75/a6/e9e73a1dbd73579383644942ef18a6d17ad728a3052a1147fb\n","Successfully built mecab-python\n","Installing collected packages: mecab-python\n","Successfully installed mecab-python-0.996-ko-0.9.2\n","+ echo Done.\n","Done.\n","Collecting jamo\n","  Downloading https://files.pythonhosted.org/packages/ac/cc/49812faae67f9a24be6ddaf58a2cf7e8c3cbfcf5b762d9414f7103d2ea2c/jamo-0.4.1-py3-none-any.whl\n","Installing collected packages: jamo\n","Successfully installed jamo-0.4.1\n","generating userdic...\n","nnp.csv\n","/tmp/mecab-ko-dic-2.1.1-20180720/tools/../model.def is not a binary model. reopen it as text mode...\n","reading /tmp/mecab-ko-dic-2.1.1-20180720/tools/../user-dic/nnp.csv ... \n","done!\n","person.csv\n","/tmp/mecab-ko-dic-2.1.1-20180720/tools/../model.def is not a binary model. reopen it as text mode...\n","reading /tmp/mecab-ko-dic-2.1.1-20180720/tools/../user-dic/person.csv ... \n","done!\n","place.csv\n","/tmp/mecab-ko-dic-2.1.1-20180720/tools/../model.def is not a binary model. reopen it as text mode...\n","reading /tmp/mecab-ko-dic-2.1.1-20180720/tools/../user-dic/place.csv ... \n","done!\n","test -z \"model.bin matrix.bin char.bin sys.dic unk.dic\" || rm -f model.bin matrix.bin char.bin sys.dic unk.dic\n","/usr/local/libexec/mecab/mecab-dict-index -d . -o . -f UTF-8 -t UTF-8\n","reading ./unk.def ... 13\n","emitting double-array: 100% |###########################################| \n","reading ./Wikipedia.csv ... 36762\n","reading ./Person.csv ... 196459\n","reading ./VCP.csv ... 9\n","reading ./user-nnp.csv ... 34\n","reading ./NNG.csv ... 208524\n","reading ./EP.csv ... 51\n","reading ./EC.csv ... 2547\n","reading ./EF.csv ... 1820\n","reading ./XR.csv ... 3637\n","reading ./Place-address.csv ... 19301\n","reading ./MAG.csv ... 14242\n","reading ./Place.csv ... 30303\n","reading ./Group.csv ... 3176\n","reading ./user-place.csv ... 2\n","reading ./VV.csv ... 7331\n","reading ./NR.csv ... 482\n","reading ./NorthKorea.csv ... 3\n","reading ./Hanja.csv ... 125750\n","reading ./Place-station.csv ... 1145\n","reading ./NP.csv ... 342\n","reading ./MM.csv ... 453\n","reading ./Inflect.csv ... 44820\n","reading ./NNB.csv ... 140\n","reading ./XSA.csv ... 19\n","reading ./VCN.csv ... 7\n","reading ./VX.csv ... 125\n","reading ./Person-actor.csv ... 99230\n","reading ./J.csv ... 416\n","reading ./ETN.csv ... 14\n","reading ./XSV.csv ... 23\n","reading ./CoinedWord.csv ... 148\n","reading ./VA.csv ... 2360\n","reading ./NNP.csv ... 2371\n","reading ./ETM.csv ... 133\n","reading ./user-person.csv ... 1\n","reading ./XSN.csv ... 124\n","reading ./Symbol.csv ... 16\n","reading ./NNBC.csv ... 677\n","reading ./Preanalysis.csv ... 5\n","reading ./IC.csv ... 1305\n","reading ./XPN.csv ... 83\n","reading ./Foreign.csv ... 11690\n","reading ./MAJ.csv ... 240\n","emitting double-array: 100% |###########################################| \n","reading ./matrix.def ... 3822x2693\n","emitting matrix      : 100% |###########################################| \n","\n","done!\n","echo To enable dictionary, rewrite /usr/local/etc/mecabrc as \\\"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\\\"\n","To enable dictionary, rewrite /usr/local/etc/mecabrc as \"dicdir = /usr/local/lib/mecab/dic/mecab-ko-dic\"\n","/tmp/mecab-ko-dic-2.1.1-20180720\n","checking for a BSD-compatible install... /usr/bin/install -c\n","checking whether build environment is sane... yes\n","/tmp/mecab-ko-dic-2.1.1-20180720/missing: Unknown `--is-lightweight' option\n","Try `/tmp/mecab-ko-dic-2.1.1-20180720/missing --help' for more information\n","configure: WARNING: 'missing' script is too old or missing\n","checking for a thread-safe mkdir -p... /bin/mkdir -p\n","checking for gawk... no\n","checking for mawk... mawk\n","checking whether make sets $(MAKE)... yes\n","checking whether make supports nested variables... yes\n","checking for mecab-config... /usr/local/bin/mecab-config\n","checking that generated files are newer than configure... done\n","configure: creating ./config.status\n","config.status: creating Makefile\n","make: Nothing to be done for 'all'.\n","make[1]: Entering directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n","make[1]: Nothing to be done for 'install-exec-am'.\n"," /bin/mkdir -p '/usr/local/lib/mecab/dic/mecab-ko-dic'\n"," /usr/bin/install -c -m 644 model.bin matrix.bin char.bin sys.dic unk.dic left-id.def right-id.def rewrite.def pos-id.def dicrc '/usr/local/lib/mecab/dic/mecab-ko-dic'\n","make[1]: Leaving directory '/tmp/mecab-ko-dic-2.1.1-20180720'\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wUg1MX-gAyMy"},"source":["import pandas as pd\n","import numpy as np\n","import re\n","import nltk\n","import time\n","from tqdm import tqdm\n","from itertools import chain\n","from collections import Counter\n","from konlpy.tag import Mecab\n","\n","mecab = Mecab()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FNJtJcReEnfg"},"source":["# 수정된 코드 => 약 80초\n","\n","start = time.time()\n","def fn_clean_var(df):\n","\n","    try:\n","        def cleansing(text):\n","            text = re.sub('(‘|\\\")(.+)(’|\\\")',r\" '\\2' \", text)                     # ' \" ’ -> 로  변환\n","            text = re.sub('【(.+)】',r' [\\1] ', text)                              #【( 등과 같은 괄호 '[ ]' 로 변환\n","            text = re.sub('(http|ftp|https)://((\\w+\\.|\\w+/|\\w+|(\\?|=|\\&)\\w+)+)', ' link ', text)  #url -> 'link' 로 변환\n","            text = re.sub('[0-9]+:[0-9]+|[0-9]+시 [0-9]분',' time ', text)         # 12:12 , 12시 12 분 -> 'time'로 변환\n","            text = re.sub('코로나19|코로나 19',' 코로나 ', text)                   # 코로나19, 코로나 19 -> '코로나' 로 변환          \n","            text = re.sub('(&nbsp;)|(&nbsp)|(&#[0-9]+;)|(fffff;)|\\x03',\"\",text) # css 공통 문법 제거\n","            if re.search('[a-zA-Z]+-[a-zA-Z]+(:|;)',text)!=None:\n","                text = \" \".join(re.findall('[가-힣]+|[0-9]+[가-힣]+',text)) #css 문법(font-family 등)이 있는 경우에는 한글/숫자+한글인 것만 추출\n","            text = re.sub('[-_+]|돋움|&[a-zA-Z]{2,100};',\" \",text)          # 돋움이라는 font가 들어있는 경우는 css에서 제거하기 힘들어서 별도로 제거 + &quot같은 것들도 제거\n","            text = re.sub('(\\w+)(\\s\\.\\.+|\\.\\.+)',\"\",text)     # ... , ..  -> '...' 제거\n","            text = re.sub('\\.',\"\",text)                                    # 마침표 제거 \n","            text = re.sub('\\s\\s+',\" \",text)                                # 공백 2개이상 -> 한개로\n","\n","            if re.search('\\S',text)==None:                                          # 텍스트가 비어있으면 'blank'로 채움\n","                text = 'blank' \n","            return text\n","            \n","        class mecab_:\n","            def __init__(self,text):\n","                self.result = mecab.pos(text)\n","            \n","            def fn_append_mecab(self):     # 형태소중 '조사'를 제외하고 clean_word에 추가.\n","                clean_word = []\n","                for word,tag in self.result:\n","                    if not tag.startswith('J') :\n","                        clean_word.append(word)\n","                \n","                return \" \".join(clean_word)        \n","\n","        df['clean_comment'] = df['Comment'].apply(lambda x: cleansing(x))   # 정규표현식을 이용한 텍스트 정제\n","        \n","        print('Doing class...')\n","        df['class_cont'] = df['clean_comment'].apply(lambda x: mecab_(x)) #mecab_pos 돌린것 저장해두기\n","        \n","        print('Creating variable with class...')\n","        df['mecab_'] = df['class_cont'].apply(lambda x: x.fn_append_mecab())          #mecab_ 변수 생성\n","\n","        del df['class_cont']\n","\n","        return df\n","\n","    except Exception as e:\n","        print('ERRER OCCUR '+e)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1DCGWa_YPtFP"},"source":["mbti = pd.read_csv(BASE_DIR/\"full_data\"/'MBTI_add.csv')\n","\n","types = mbti[\"type\"].unique()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0u7mrlyR7NfP"},"source":["#상위 5개 키워드 뽑기\n","set_ = []\n","\n","for type_ in types:\n","  df = pd.read_csv(BASE_DIR/\"full_data\"/\"{}.csv\".format(type_),lineterminator='\\n')\n","\n","  prep_df = fn_clean_var(df)\n","\n","  prep_df[prep_df['Comment'].str.contains('하나')].head(30)\n","\n","  data_list = []\n","\n","  for k in range(len(prep_df['mecab_'])):\n","      word_list = mecab.nouns(prep_df['mecab_'][k])\n","      for word in word_list:\n","          data_list.append(word)\n","          \n","  df3 = pd.DataFrame(data_list, columns = ['단어'])\n","\n","  c = Counter(df3['단어'])\n","\n","  # 한 글자 단어 제거 함수\n","  def remove_onewords(words):\n","      result = []\n","      for w in words:\n","          if len(w) != 1:\n","              result.append(w)\n","      return result\n","\n","  stopword_list = [\"유형\", \"성격\", \"검사\", \"댓글\", \"영상\",\"사람\",\"감사\",\"생각\",\"잇팁\",\"잇티제\",\"잇프피\",\"잇프제\",\"인팁\",\n","                  \"인티제\",\"인프피\",\"인프제\",\"엣팁\",\"엣티제\",\"잇프피\",\"엣프제\",\"엔팁\",\"엔티제\",\"엔프피\",\"엔프제\",\n","                  \"친구\",\"공감\",\"이거\", \"여기\", \"부분\", \"때문\", \"인데\",\"성향\", \"남편\", \"부모\", \"사이\", \"소름\", \"저희\",\n","                  \"엄마\", \"우리\", \"뭔가\", \"남친\", \"본인\",\"그게\", \"동생\", \"누가\"]\n","\n","  # 불용어 제거 함수\n","  def remove_stopwords(words):\n","      result = []\n","      for w in words:\n","          if w not in stopword_list:\n","              result.append(w)\n","      return result\n","\n","      \n","  data_list = []\n","\n","  def tokenizing_and_cleaning(raw_text):\n","      \n","      # 명사 단위로 토큰화 하는 과정\n","      token = mecab.nouns(raw_text)\n","\n","      # 불용어 제거 \n","      stopwords = remove_stopwords(token)\n","\n","      # 한글자 단어 제거 \n","      meaningful_words = remove_onewords(stopwords)\n","      \n","      data_list.append(meaningful_words)\n","\n","\n","\n","  # 함수 적용\n","  df3['단어'].apply(lambda x: tokenizing_and_cleaning(x))\n","\n","  word_list = []\n","\n","  for i in range(len(data_list)):\n","      word_list.extend(data_list[i])\n","\n","  all_token = pd.DataFrame(word_list, columns = [\"토큰\"])\n","  all_token.head()\n","\n","  k = Counter(all_token['토큰'])\n","  most_word = k.most_common(100)\n","  set_ += most_word[0:5]\n","\n","\n","\n","df_set = pd.DataFrame(set_, columns = [\"단어 토큰\", \"빈도 수\"])\n","df_set[\"유형\"] = np.nan\n","\n","for i in range(16):\n","  df_set[\"유형\"][i*5:i*5+5] = types[i]\n","\n","#df_set.to_csv(BASE_DIR/\"best_comment\"/\"상위 5개.csv\",index = False, encoding='utf-8-sig')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pl2Y6C2NEjeM"},"source":["#베스트 코멘트 뽑기\n","\n","for type_ in types:\n","\n","  best_comment = pd.DataFrame()\n","\n","  df = pd.read_csv(BASE_DIR/\"full_data\"/\"{}.csv\".format(type_),lineterminator='\\n')\n","  \n","  #숫자 형식 아닐 경우 데이터 전처리\n","  if df['Likes'].dtype != 'int64':\n","\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".1K\",\"100\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".2K\",\"200\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".3K\",\"300\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".4K\",\"400\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".5K\",\"500\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".6K\",\"600\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".7K\",\"700\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".8K\",\"800\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\".9K\",\"900\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"1K\",\"1000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"2K\",\"2000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"3K\",\"3000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"4K\",\"4000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"5K\",\"5000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"6K\",\"6000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"7K\",\"7000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"8K\",\"8000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"9K\",\"9000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\"10K\",\"10000\"))\n","    df['Likes'] = df['Likes'].apply(lambda x: x.replace(\" \",\"\"))\n","\n","    df['Likes'] = df['Likes'].astype('int')\n","  \n","\n","\n","  for i in range(0,5):\n","    best_comment = pd.concat([best_comment, df[df['Comment'].str.contains(df_set[df_set[\"유형\"] == \"{}\".format(type_)][\"단어 토큰\"].iloc[i])].sort_values(by=['Likes'],ascending=False).head(50)[0:5]])\n","\n","  best_comment[\"단어\"] = np.nan\n","\n","  for i in range(5):\n","    best_comment[\"단어\"][i*5:i*5+5] = df_set[df_set[\"유형\"] == \"{}\".format(type_)][\"단어 토큰\"].iloc[i]\n","\n","  #best_comment.to_csv(BASE_DIR/\"best_comment\"/\"{}.csv\".format(type_),index = False, encoding='utf-8-sig')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8pay2YeELjhD","executionInfo":{"status":"ok","timestamp":1614575193378,"user_tz":-540,"elapsed":827,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"57fce3d6-ed5a-47a2-edbe-96d201188db0"},"source":["types"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['ISTJ', 'ESTJ', 'ISFJ', 'ESFJ', 'ISTP', 'ESTP', 'ISFP', 'ESFP',\n","       'INFJ', 'ENFJ', 'INFP', 'ENFP', 'INTJ', 'ENTJ', 'INTP', 'ENTP'],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"kit8H4PDEEed","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1r-eaDHs8zhzXmXw4304lYDnA5XSyzf0K"},"executionInfo":{"status":"ok","timestamp":1614955611429,"user_tz":-540,"elapsed":238936,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"1088e45e-fbf9-436a-d01e-660ebee57ec1"},"source":["##워드 클라우드 뽑기\n","\n","for type_ in types:\n","  df = pd.read_csv(BASE_DIR/\"full_data\"/\"{}.csv\".format(type_),lineterminator='\\n')\n","\n","  prep_df = fn_clean_var(df)\n","\n","  prep_df[prep_df['Comment'].str.contains('하나')].head(30)\n","\n","  data_list = []\n","\n","  for k in range(len(prep_df['mecab_'])):\n","      word_list = mecab.nouns(prep_df['mecab_'][k])\n","      for word in word_list:\n","          data_list.append(word)\n","          \n","  df3 = pd.DataFrame(data_list, columns = ['단어'])\n","\n","  c = Counter(df3['단어'])\n","\n","  # 한 글자 단어 제거 함수\n","  def remove_onewords(words):\n","      result = []\n","      for w in words:\n","          if len(w) != 1:\n","              result.append(w)\n","      return result\n","\n","  stopword_list = [\"유형\", \"성격\", \"검사\", \"댓글\", \"영상\",\"사람\",\"감사\",\"생각\",\"잇팁\",\"잇티제\",\"잇프피\",\"잇프제\",\"인팁\",\n","                  \"인티제\",\"인프피\",\"인프제\",\"엣팁\",\"엣티제\",\"잇프피\",\"엣프제\",\"엔팁\",\"엔티제\",\"엔프피\",\"엔프제\",\n","                  \"친구\",\"공감\",\"이거\", \"여기\", \"부분\", \"때문\", \"인데\",\"성향\", \"남편\", \"부모\", \"사이\", \"소름\", \"저희\",\n","                  \"엄마\", \"우리\", \"뭔가\", \"남친\", \"본인\",\"그게\", \"동생\", \"누가\"]\n","\n","  # 불용어 제거 함수\n","  def remove_stopwords(words):\n","      result = []\n","      for w in words:\n","          if w not in stopword_list:\n","              result.append(w)\n","      return result\n","\n","      \n","  data_list = []\n","\n","  def tokenizing_and_cleaning(raw_text):\n","      \n","      # 명사 단위로 토큰화 하는 과정\n","      token = mecab.nouns(raw_text)\n","\n","      # 불용어 제거 \n","      stopwords = remove_stopwords(token)\n","\n","      # 한글자 단어 제거 \n","      meaningful_words = remove_onewords(stopwords)\n","      \n","      data_list.append(meaningful_words)\n","\n","\n","\n","  # 함수 적용\n","  df3['단어'].apply(lambda x: tokenizing_and_cleaning(x))\n","\n","  word_list = []\n","\n","  for i in range(len(data_list)):\n","      word_list.extend(data_list[i])\n","\n","  all_token = pd.DataFrame(word_list, columns = [\"토큰\"])\n","  all_token.head()\n","\n","  k = Counter(all_token['토큰'])\n","  most_word = k.most_common(100)\n","\n","  most_token = pd.DataFrame(most_word, columns = [\"단어 토큰\", \"빈도 수\"])\n","  print(most_token)\n","\n","  # 워드 클라우드를 만들기 위해 사전(딕셔너리) 형태로 변경하기\n","  word_dict = dict( k.most_common(100))\n","  word_dict\n","\n","  # 워드클라우드 마스크 코드\n","  # 마스크를 위한 이미지는 png파일로 그림을 제외한 배경이 투명해야합니다. (포토샵의 바둑판표시)\n","  # 이미지 크기를 잘 조절해야 폰트가 깨지지 않는 선에서 글씨가 빼곡하게 들어갑니다! \n","  # plt의 colormap을 사용하여 원하는 색상을 지정해줄 수 있습니다.\n","\n","  from PIL import Image\n","  import numpy as np\n","  import random\n","\n","  icon = Image.open(('/content/mnt/Shared drives/MBTI/data/뇌_파랑.png'))\n","  mask = Image.new(\"RGB\", icon.size, (400,400,400))\n","  mask.paste(icon,icon)\n","  mask = np.array(mask)\n","  cmap = plt.cm.PuBu\n","\n","  # 아래의 코드는 이미지 본 색상을 따라가는 코드입니다. (그림 색상을 그대로 가져와서 사용해야 할 때 ex.태극 문양)\n","  from wordcloud import ImageColorGenerator\n","  image_colors = ImageColorGenerator(mask)\n","\n","  # 워드 클라우드 출력하기\n","  wc = WordCloud(font_path = '/content/mnt/Shared drives/MBTI/data/NanumSquare_acB.ttf',      # 폰트 지정 (본인이 원하는 폰트를 현재 디렉토리로 복붙하셔야합니다.) C:\\Windows\\Fonts에 있는 폰트를 복붙, 영어로 글꼴이름 변경\n","                mask = mask,                 # 위에서 만들어준 마스크 지정\n","                mode = \"RGBA\", background_color=None,  # 배경색 지정\n","                max_font_size = 320,         # 폰트사이즈지정 (그림을 구체화 시킬 때 사용합니다. 적당한 선을 본인 그림에 맞게 찾으셔야합니다.)\n","                margin = 0,                  # 토큰 사이사이의 빈 칸 크기 지정 (0이 가장 빼곡하므로 좋습니다.) \n","                width = 3000, height =3000)             # 위에서 지정한 plt의 colormap 지정 (본 워드클라우드는 이미지의 색을 따라가게 해놨으므로 적용되지 않습니다.)\n","\n","  cloud = wc.generate_from_frequencies(word_dict) # 빈도수를 활용하여 워드클라우드에 적용\n","\n","  plt.figure(figsize=(15,15))\n","  # 아래의 코드는 ImageColorGenerator를 적용시키기 위한 코드\n","  plt.imshow(cloud.recolor(color_func = image_colors), interpolation = \"sinc\") # interpolation는 이미지의 보간방법이라는데..지정해주는 인자마다 선명도의 차이를 보입니다.\n","  plt.axis(\"off\")\n","  plt.show()\n","\n","  #cloud.to_file(BASE_DIR/\"고해상도\"/\"{}.png\".format(type_))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":746},"id":"aj6wQHXoBHUX","executionInfo":{"status":"ok","timestamp":1615109371220,"user_tz":-540,"elapsed":584,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"52f035cd-b7e6-48e5-b01e-ab72bbc44d80"},"source":["prep_df.iloc[5:22]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Comment</th>\n","      <th>Likes</th>\n","      <th>clean_comment</th>\n","      <th>mecab_</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>놕놕</td>\n","      <td>한 번씩 외향적인 인간처럼 나대다가 후회한 적 개많음</td>\n","      <td>1.4K</td>\n","      <td>한 번씩 외향적인 인간처럼 나대다가 후회한 적 개많음</td>\n","      <td>한 번 씩 외향 적 인 인간 나대 다가 후회 한 적 개 많 음</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>시켜줘이동혁명예발닦개</td>\n","      <td>와 이거 ㄹㅇㄹㅇㄹㅇㄹㅇ 내 흑역사 중 하나는 그것때문에 생김;;</td>\n","      <td>136</td>\n","      <td>와 이거 ㄹㅇㄹㅇㄹㅇㄹㅇ 내 흑역사 중 하나는 그것때문에 생김;;</td>\n","      <td>와 이거 ㄹ ㅇㄹㅇㄹㅇㄹㅇ 내 흑 역사 중 하나 그것 때문 생김 ;;</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>새뫠애크 200</td>\n","      <td>이거 진짜임ㅠㅠ소심한 성격 고치려고 막 개그같은것도 찾아보고 하면서 외향적인 사람처...</td>\n","      <td>139</td>\n","      <td>이거 진짜임ㅠㅠ소심한 성격 고치려고 막 개그같은것도 찾아보고 하면서 외향적인 사람처...</td>\n","      <td>이거 진짜 임 ㅠㅠ소심한 성격 고치 려고 막 개그 같 은 것 찾아보 고 하 면서 외...</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>55DOBAL</td>\n","      <td>@새뫠애크 200  과거의 일 생각하면서 이불킥 ㅋㅋㅋㅋㅋㅋㅋ</td>\n","      <td>12</td>\n","      <td>@새뫠애크 200 과거의 일 생각하면서 이불킥 ㅋㅋㅋㅋㅋㅋㅋ</td>\n","      <td>@ 새 뫠애크 200 과거 일 생각 하 면서 이불 킥 ㅋㅋㅋ ㅋㅋ ㅋㅋ</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>ᄋᄋ</td>\n","      <td>내가 오늘 그럼...아 겁나 후회되고 쪽팔려</td>\n","      <td>17</td>\n","      <td>내가 오늘 아 겁나 후회되고 쪽팔려</td>\n","      <td>내 오늘 아 겁나 후회 되 고 쪽팔려</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>능덕</td>\n","      <td>ㄴ..나는 외향적인데 낯가려서 평소에 내ㅗㅑㅇ형처럼하는 인프피인데...</td>\n","      <td>6</td>\n","      <td>나는 외향적인데 낯가려서 평소에 내ㅗㅑㅇ형처럼하는</td>\n","      <td>나 외향 적 인데 낯 가려서 평소 내 ㅗㅑㅇ형처럼하는</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>뫌크튜</td>\n","      <td>ㅋㅋㅋㅋㅋㅋㅋㅋㅋ</td>\n","      <td>1</td>\n","      <td>ㅋㅋㅋㅋㅋㅋㅋㅋㅋ</td>\n","      <td>ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Me어켓</td>\n","      <td>격공</td>\n","      <td>1</td>\n","      <td>격공</td>\n","      <td>격 공</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>널 보면 재채기가 나올 것 같아</td>\n","      <td>장기자랑때 아재개그 같은고 해서 망했었던 기억이...</td>\n","      <td>4</td>\n","      <td>장기자랑때 아재개그 같은고 해서 망했었던</td>\n","      <td>장기 자랑 때 아재 개그 같 은고 해서 망했 었 던</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>장훈님하고싶은거다해</td>\n","      <td>내 인생 흑역사 TOP1이 인싸 무리 기어들어간거</td>\n","      <td>9</td>\n","      <td>내 인생 흑역사 TOP1이 인싸 무리 기어들어간거</td>\n","      <td>내 인생 흑역사 TOP 1 이 인 싸 무리 기어들어간 거</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>INFP</td>\n","      <td>ㄹㅇ... 그리고 지금 그게 내 인생 최대 흑역사다..</td>\n","      <td>0</td>\n","      <td>그리고 지금 그게 내 인생 최대</td>\n","      <td>그리고 지금 그게 내 인생 최대</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>ᄏᄏ</td>\n","      <td>INFP는.. 호구라고 생각할 수도 있는데 아직 폭발한 적이 별로 없어서지 늬들이 ...</td>\n","      <td>781</td>\n","      <td>호구라고 생각할 수도 있는데 아직 폭발한 적이 별로 없어서지 늬들이 생각할 정도로...</td>\n","      <td>호구 라고 생각 할 수 있 는데 아직 폭발 한 적 별로 없 어서 지 늬 들 생각 할...</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>정종현</td>\n","      <td>ㄹㅇㅋㅋㅋㅋㅋ</td>\n","      <td>9</td>\n","      <td>ㄹㅇㅋㅋㅋㅋㅋ</td>\n","      <td>ㅇㅋㅋㅋㅋㅋ</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>츄우으</td>\n","      <td>ㄹㅇ</td>\n","      <td>4</td>\n","      <td>ㄹㅇ</td>\n","      <td>ㅇ</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>수까모토 유타</td>\n","      <td>관계를 없애기는 하는데 화내고 없애는게 아니라 감정적인 뒤탈 없이 마무리 하고 서서...</td>\n","      <td>120</td>\n","      <td>관계를 없애기는 하는데 화내고 없애는게 아니라 감정적인 뒤탈 없이 마무리 하고 서서...</td>\n","      <td>관계 없애 기 하 는 데 화내 고 없애 는 게 아니 라 감정 적 인 뒤탈 없이 마무...</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>시켜줘이동혁명예발닦개</td>\n","      <td>@수까모토 유타  와 이거 ㄹㅇㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ그리고 진...</td>\n","      <td>102</td>\n","      <td>@수까모토 유타 와 이거 ㄹㅇㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ그리고 진짜...</td>\n","      <td>@ 수 까 모토 유타 와 이거 ㄹ ㅇㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋ...</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>J</td>\n","      <td>와..진짜 공감..인생에서 한 친구 손절하고 그 친구에 대한 감정 자체가 소멸해버림</td>\n","      <td>34</td>\n","      <td>진짜 인생에서 한 친구 손절하고 그 친구에 대한 감정 자체가 소멸해버림</td>\n","      <td>진짜 인생 한 친구 손절 하 고 그 친구 대한 감정 자체 소멸 해버림</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     ID                                            Comment  \\\n","5                    놕놕                      한 번씩 외향적인 인간처럼 나대다가 후회한 적 개많음   \n","6           시켜줘이동혁명예발닦개               와 이거 ㄹㅇㄹㅇㄹㅇㄹㅇ 내 흑역사 중 하나는 그것때문에 생김;;   \n","7              새뫠애크 200  이거 진짜임ㅠㅠ소심한 성격 고치려고 막 개그같은것도 찾아보고 하면서 외향적인 사람처...   \n","8               55DOBAL                 @새뫠애크 200  과거의 일 생각하면서 이불킥 ㅋㅋㅋㅋㅋㅋㅋ   \n","9                    ᄋᄋ                           내가 오늘 그럼...아 겁나 후회되고 쪽팔려   \n","10                   능덕            ㄴ..나는 외향적인데 낯가려서 평소에 내ㅗㅑㅇ형처럼하는 인프피인데...   \n","11                  뫌크튜                                          ㅋㅋㅋㅋㅋㅋㅋㅋㅋ   \n","12                 Me어켓                                                 격공   \n","13    널 보면 재채기가 나올 것 같아                      장기자랑때 아재개그 같은고 해서 망했었던 기억이...   \n","14           장훈님하고싶은거다해                        내 인생 흑역사 TOP1이 인싸 무리 기어들어간거   \n","15                 INFP                     ㄹㅇ... 그리고 지금 그게 내 인생 최대 흑역사다..   \n","16                   ᄏᄏ  INFP는.. 호구라고 생각할 수도 있는데 아직 폭발한 적이 별로 없어서지 늬들이 ...   \n","17                  정종현                                            ㄹㅇㅋㅋㅋㅋㅋ   \n","18                  츄우으                                                 ㄹㅇ   \n","19              수까모토 유타  관계를 없애기는 하는데 화내고 없애는게 아니라 감정적인 뒤탈 없이 마무리 하고 서서...   \n","20          시켜줘이동혁명예발닦개   @수까모토 유타  와 이거 ㄹㅇㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ그리고 진...   \n","21                    J     와..진짜 공감..인생에서 한 친구 손절하고 그 친구에 대한 감정 자체가 소멸해버림   \n","\n","         Likes                                      clean_comment  \\\n","5       1.4K                        한 번씩 외향적인 인간처럼 나대다가 후회한 적 개많음   \n","6        136                 와 이거 ㄹㅇㄹㅇㄹㅇㄹㅇ 내 흑역사 중 하나는 그것때문에 생김;;   \n","7        139    이거 진짜임ㅠㅠ소심한 성격 고치려고 막 개그같은것도 찾아보고 하면서 외향적인 사람처...   \n","8         12                    @새뫠애크 200 과거의 일 생각하면서 이불킥 ㅋㅋㅋㅋㅋㅋㅋ   \n","9         17                                  내가 오늘 아 겁나 후회되고 쪽팔려   \n","10         6                         나는 외향적인데 낯가려서 평소에 내ㅗㅑㅇ형처럼하는    \n","11         1                                            ㅋㅋㅋㅋㅋㅋㅋㅋㅋ   \n","12         1                                                   격공   \n","13         4                              장기자랑때 아재개그 같은고 해서 망했었던    \n","14         9                          내 인생 흑역사 TOP1이 인싸 무리 기어들어간거   \n","15         0                                   그리고 지금 그게 내 인생 최대    \n","16       781     호구라고 생각할 수도 있는데 아직 폭발한 적이 별로 없어서지 늬들이 생각할 정도로...   \n","17         9                                              ㄹㅇㅋㅋㅋㅋㅋ   \n","18         4                                                   ㄹㅇ   \n","19       120    관계를 없애기는 하는데 화내고 없애는게 아니라 감정적인 뒤탈 없이 마무리 하고 서서...   \n","20       102     @수까모토 유타 와 이거 ㄹㅇㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ그리고 진짜...   \n","21        34              진짜 인생에서 한 친구 손절하고 그 친구에 대한 감정 자체가 소멸해버림   \n","\n","                                               mecab_  \n","5                  한 번 씩 외향 적 인 인간 나대 다가 후회 한 적 개 많 음  \n","6              와 이거 ㄹ ㅇㄹㅇㄹㅇㄹㅇ 내 흑 역사 중 하나 그것 때문 생김 ;;  \n","7   이거 진짜 임 ㅠㅠ소심한 성격 고치 려고 막 개그 같 은 것 찾아보 고 하 면서 외...  \n","8             @ 새 뫠애크 200 과거 일 생각 하 면서 이불 킥 ㅋㅋㅋ ㅋㅋ ㅋㅋ  \n","9                                내 오늘 아 겁나 후회 되 고 쪽팔려  \n","10                      나 외향 적 인데 낯 가려서 평소 내 ㅗㅑㅇ형처럼하는  \n","11                                        ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ  \n","12                                                격 공  \n","13                       장기 자랑 때 아재 개그 같 은고 해서 망했 었 던  \n","14                    내 인생 흑역사 TOP 1 이 인 싸 무리 기어들어간 거  \n","15                                  그리고 지금 그게 내 인생 최대  \n","16  호구 라고 생각 할 수 있 는데 아직 폭발 한 적 별로 없 어서 지 늬 들 생각 할...  \n","17                                             ㅇㅋㅋㅋㅋㅋ  \n","18                                                  ㅇ  \n","19  관계 없애 기 하 는 데 화내 고 없애 는 게 아니 라 감정 적 인 뒤탈 없이 마무...  \n","20    @ 수 까 모토 유타 와 이거 ㄹ ㅇㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋㅋ ㅋㅋ...  \n","21             진짜 인생 한 친구 손절 하 고 그 친구 대한 감정 자체 소멸 해버림  "]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"abFq-RWs_Nom","executionInfo":{"status":"ok","timestamp":1615109326897,"user_tz":-540,"elapsed":10757,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"7c93ed38-49e1-43b5-e5a5-2aafda6cbd34"},"source":["##워드 클라우드 뽑기\n","\n","df = pd.read_csv(BASE_DIR/\"full_data\"/\"INFP_.csv\".format(type_),lineterminator='\\n')\n","\n","prep_df = fn_clean_var(df)\n","\n","prep_df[prep_df['Comment'].str.contains('하나')].head(30)\n","\n","data_list = []\n","\n","for k in range(len(prep_df['mecab_'])):\n","    word_list = mecab.nouns(prep_df['mecab_'][k])\n","    for word in word_list:\n","        data_list.append(word)\n","        \n","df3 = pd.DataFrame(data_list, columns = ['단어'])\n","\n","c = Counter(df3['단어'])\n","\n","# 한 글자 단어 제거 함수\n","def remove_onewords(words):\n","    result = []\n","    for w in words:\n","        if len(w) != 1:\n","            result.append(w)\n","    return result\n","\n","stopword_list = [\"유형\", \"성격\", \"검사\", \"댓글\", \"영상\",\"사람\",\"감사\",\"생각\",\"잇팁\",\"잇티제\",\"잇프피\",\"잇프제\",\"인팁\",\n","                \"인티제\",\"인프피\",\"인프제\",\"엣팁\",\"엣티제\",\"잇프피\",\"엣프제\",\"엔팁\",\"엔티제\",\"엔프피\",\"엔프제\",\n","                \"친구\",\"공감\",\"이거\", \"여기\", \"부분\", \"때문\", \"인데\",\"성향\", \"남편\", \"부모\", \"사이\", \"소름\", \"저희\",\n","                \"엄마\", \"우리\", \"뭔가\", \"남친\", \"본인\",\"그게\", \"동생\", \"누가\"]\n","\n","# 불용어 제거 함수\n","def remove_stopwords(words):\n","    result = []\n","    for w in words:\n","        if w not in stopword_list:\n","            result.append(w)\n","    return result\n","\n","    \n","data_list = []\n","\n","def tokenizing_and_cleaning(raw_text):\n","    \n","    # 명사 단위로 토큰화 하는 과정\n","    token = mecab.nouns(raw_text)\n","\n","    # 불용어 제거 \n","    stopwords = remove_stopwords(token)\n","\n","    # 한글자 단어 제거 \n","    meaningful_words = remove_onewords(stopwords)\n","    \n","    data_list.append(meaningful_words)\n","\n","\n","\n","# 함수 적용\n","df3['단어'].apply(lambda x: tokenizing_and_cleaning(x))\n","\n","word_list = []\n","\n","for i in range(len(data_list)):\n","    word_list.extend(data_list[i])\n","\n","all_token = pd.DataFrame(word_list, columns = [\"토큰\"])\n","all_token.head()\n","\n","k = Counter(all_token['토큰'])\n","most_word = k.most_common(100)\n","\n","most_token = pd.DataFrame(most_word, columns = [\"단어 토큰\", \"빈도 수\"])\n","print(most_token)\n","\n","# 워드 클라우드를 만들기 위해 사전(딕셔너리) 형태로 변경하기\n","word_dict = dict( k.most_common(100))\n","word_dict\n","\n","# 워드클라우드 마스크 코드\n","# 마스크를 위한 이미지는 png파일로 그림을 제외한 배경이 투명해야합니다. (포토샵의 바둑판표시)\n","# 이미지 크기를 잘 조절해야 폰트가 깨지지 않는 선에서 글씨가 빼곡하게 들어갑니다! \n","# plt의 colormap을 사용하여 원하는 색상을 지정해줄 수 있습니다.\n","\n","from PIL import Image\n","import numpy as np\n","import random\n","\n","icon = Image.open(('/content/mnt/Shared drives/MBTI/data/뇌_파랑.png'))\n","mask = Image.new(\"RGB\", icon.size, (400,400,400))\n","mask.paste(icon,icon)\n","mask = np.array(mask)\n","cmap = plt.cm.PuBu\n","\n","# 아래의 코드는 이미지 본 색상을 따라가는 코드입니다. (그림 색상을 그대로 가져와서 사용해야 할 때 ex.태극 문양)\n","from wordcloud import ImageColorGenerator\n","image_colors = ImageColorGenerator(mask)\n","\n","# 워드 클라우드 출력하기\n","wc = WordCloud(font_path = '/content/mnt/Shared drives/MBTI/data/NanumSquare_acB.ttf',      # 폰트 지정 (본인이 원하는 폰트를 현재 디렉토리로 복붙하셔야합니다.) C:\\Windows\\Fonts에 있는 폰트를 복붙, 영어로 글꼴이름 변경\n","              mask = mask,                 # 위에서 만들어준 마스크 지정\n","              mode = \"RGBA\", background_color=None,  # 배경색 지정\n","              max_font_size = 320,         # 폰트사이즈지정 (그림을 구체화 시킬 때 사용합니다. 적당한 선을 본인 그림에 맞게 찾으셔야합니다.)\n","              margin = 0,                  # 토큰 사이사이의 빈 칸 크기 지정 (0이 가장 빼곡하므로 좋습니다.) \n","              width = 3000, height =3000)             # 위에서 지정한 plt의 colormap 지정 (본 워드클라우드는 이미지의 색을 따라가게 해놨으므로 적용되지 않습니다.)\n","\n","cloud = wc.generate_from_frequencies(word_dict) # 빈도수를 활용하여 워드클라우드에 적용\n","\n","plt.figure(figsize=(15,15))\n","# 아래의 코드는 ImageColorGenerator를 적용시키기 위한 코드\n","plt.imshow(cloud.recolor(color_func = image_colors), interpolation = \"sinc\") # interpolation는 이미지의 보간방법이라는데..지정해주는 인자마다 선명도의 차이를 보입니다.\n","plt.axis(\"off\")\n","plt.show()\n","\n","#cloud.to_file(BASE_DIR/\"고해상도\"/\"{}.png\".format(type_))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Doing class...\n","Creating variable with class...\n","   단어 토큰  빈도 수\n","0     우울    81\n","1     이상    73\n","2     하나    71\n","3     감정    67\n","4     자기    61\n","5     얘기    59\n","6     혼자    57\n","7     시간    55\n","8     상처    50\n","9     자신    49\n","10    정도    48\n","11    이해    47\n","12    연락    46\n","13    관심    44\n","14    기분    42\n","15    주변    40\n","16    망상    40\n","17    행복    36\n","18    관계    35\n","19    마음    34\n","20    아이    32\n","21    세상    32\n","22    인생    30\n","23    비티    28\n","24    계획    28\n","25    노래    27\n","26    인간    27\n","27    시작    26\n","28    눈치    26\n","29    미안    26\n","30    텐션    25\n","31    하루    25\n","32    인정    24\n","33   유튜브    24\n","34    사랑    24\n","35    누구    24\n","36    현실    24\n","37    사회    23\n","38    행동    22\n","39    상황    22\n","40    자체    21\n","41    기억    21\n","42    대화    21\n","43  스트레스    21\n","44    눈물    21\n","45    남자    21\n","46    고민    20\n","47   여러분    20\n","48    특징    20\n","49    공부    19\n","50    소설    19\n","51    상상    19\n","52    영화    19\n","53    소리    19\n","54    찐따    19\n","55    학교    19\n","56    이건    19\n","57    경우    18\n","58    다음    18\n","59    이유    18\n","60    머리    18\n","61    그거    18\n","62   인터넷    18\n","63    반응    18\n","64    후회    17\n","65    기복    17\n","66    부담    17\n","67    중요    17\n","68    순간    17\n","69    상대    17\n","70    감성    17\n","71    평소    16\n","72    몰입    16\n","73   이야기    16\n","74    나중    16\n","75    그때    16\n","76    필요    16\n","77    표현    16\n","78   상대방    16\n","79    손절    15\n","80    정신    15\n","81    외향    14\n","82    진심    14\n","83    동안    14\n","84    샤워    13\n","85   주인공    13\n","86    건가    13\n","87    결국    13\n","88    배려    13\n","89    취미    12\n","90    그것    12\n","91    느낌    12\n","92   드라마    12\n","93    적응    12\n","94    회사    12\n","95    생활    12\n","96    예전    12\n","97    문제    12\n","98    짜증    12\n","99    한국    12\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x1080 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"TDMSJzyKZQ98"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f1_j9KHiQWNy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615109312355,"user_tz":-540,"elapsed":574,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"fb428354-d280-4aa2-8d83-7f4647ea6c98"},"source":["import pandas as pd\n","print(\"pandas version: \", pd.__version__)\n","pd.set_option('display.max_row', 500)\n","pd.set_option('display.max_columns', 100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["pandas version:  1.1.5\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uFTg_vuaZbLS"},"source":["  for i in range(0,5):\n","    best_comment = pd.concat([best_comment, df[df['Comment'].str.contains(df_set[df_set[\"유형\"] == \"{}\".format(type_)][\"단어 토큰\"].iloc[i])].sort_values(by=['Likes'],ascending=False).head(50)[0:5]])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nx8VdIyBZc2R"},"source":["df_ = pd.DataFrame()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7e1SmX8mTk9i"},"source":["for type_ in types:\n","  df = pd.read_csv(BASE_DIR/\"best_comment\"/\"{}.csv\".format(type_),lineterminator='\\n')\n","  df_ = pd.concat([df_,df])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"id":"lH42qrApawTm","executionInfo":{"status":"ok","timestamp":1614579343679,"user_tz":-540,"elapsed":466,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"0feb57c2-f2ca-4994-c5f7-323125f1745c"},"source":["df_[\"MBTI\"] = np.nan\n","df_.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Comment</th>\n","      <th>Likes</th>\n","      <th>단어</th>\n","      <th>MBTI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>먹보</td>\n","      <td>계획성은 좋은데 미루는 걸 좋아해요 ㅎㅎ 벼락치기마저 계획하고 실천하는...‘내일 ...</td>\n","      <td>1200</td>\n","      <td>계획</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>김비올</td>\n","      <td>ISTJ 댓글 달아봅니다1. 스케줄러: 쓰기도 안 쓰기도 하지만 일을 시작할 때 계...</td>\n","      <td>1100</td>\n","      <td>계획</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>hyun ah</td>\n","      <td>ISTJ-T 1. 극한의 계획충 2. 정말 남한테 관심 없음 타인과의 관계에서 감정...</td>\n","      <td>1000</td>\n","      <td>계획</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ᄆᄆ</td>\n","      <td>ISTJ인데 먼일을 하면 계획하고 정해놓은 과정에 따라 착착 진행해야 마음이 편함....</td>\n","      <td>846</td>\n","      <td>계획</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>계정1</td>\n","      <td>ISTJ분들 시계 보면서 몇시부터 몇시까지는 뭐 하고 뭐 하고 이런식으로 계획 세우...</td>\n","      <td>249</td>\n","      <td>계획</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          ID                                            Comment  ...  단어 MBTI\n","0         먹보  계획성은 좋은데 미루는 걸 좋아해요 ㅎㅎ 벼락치기마저 계획하고 실천하는...‘내일 ...  ...  계획  NaN\n","1        김비올  ISTJ 댓글 달아봅니다1. 스케줄러: 쓰기도 안 쓰기도 하지만 일을 시작할 때 계...  ...  계획  NaN\n","2    hyun ah  ISTJ-T 1. 극한의 계획충 2. 정말 남한테 관심 없음 타인과의 관계에서 감정...  ...  계획  NaN\n","3         ᄆᄆ  ISTJ인데 먼일을 하면 계획하고 정해놓은 과정에 따라 착착 진행해야 마음이 편함....  ...  계획  NaN\n","4        계정1  ISTJ분들 시계 보면서 몇시부터 몇시까지는 뭐 하고 뭐 하고 이런식으로 계획 세우...  ...  계획  NaN\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Po7zOQhab1w","executionInfo":{"status":"ok","timestamp":1614579346124,"user_tz":-540,"elapsed":792,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"ae44cc1f-82d5-4a27-caee-33655d365084"},"source":["for i in range(16):\n","  df_[\"MBTI\"].iloc[i*25:i*25+25] = types[i]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"J_6MKh0gbNfY"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"qEZy_HIRa-lM","executionInfo":{"status":"ok","timestamp":1614579347634,"user_tz":-540,"elapsed":510,"user":{"displayName":"­정수연 | 서울 파이낸스경영학과","photoUrl":"","userId":"03470074414199614445"}},"outputId":"83e5a2e2-7307-4b72-cd54-8b44c0898dce"},"source":["df_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Comment</th>\n","      <th>Likes</th>\n","      <th>단어</th>\n","      <th>MBTI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>먹보</td>\n","      <td>계획성은 좋은데 미루는 걸 좋아해요 ㅎㅎ 벼락치기마저 계획하고 실천하는...‘내일 ...</td>\n","      <td>1200</td>\n","      <td>계획</td>\n","      <td>ISTJ</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>김비올</td>\n","      <td>ISTJ 댓글 달아봅니다1. 스케줄러: 쓰기도 안 쓰기도 하지만 일을 시작할 때 계...</td>\n","      <td>1100</td>\n","      <td>계획</td>\n","      <td>ISTJ</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>hyun ah</td>\n","      <td>ISTJ-T 1. 극한의 계획충 2. 정말 남한테 관심 없음 타인과의 관계에서 감정...</td>\n","      <td>1000</td>\n","      <td>계획</td>\n","      <td>ISTJ</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ᄆᄆ</td>\n","      <td>ISTJ인데 먼일을 하면 계획하고 정해놓은 과정에 따라 착착 진행해야 마음이 편함....</td>\n","      <td>846</td>\n","      <td>계획</td>\n","      <td>ISTJ</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>계정1</td>\n","      <td>ISTJ분들 시계 보면서 몇시부터 몇시까지는 뭐 하고 뭐 하고 이런식으로 계획 세우...</td>\n","      <td>249</td>\n","      <td>계획</td>\n","      <td>ISTJ</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>Doha K</td>\n","      <td>주변에 엔팁이 있다면 알아둬야함 엔팁이랑 의견이 다른데 엔팁이 그래 맞아~ 하고 냅...</td>\n","      <td>2900</td>\n","      <td>토론</td>\n","      <td>ENTP</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>오지원</td>\n","      <td>그리고 제발 ENTP면서 자기랑 토론 안해주고 수긍하고 넘어간다면 토론을 못하는게 ...</td>\n","      <td>1000</td>\n","      <td>토론</td>\n","      <td>ENTP</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>이름</td>\n","      <td>엔팁은 자기 주장에 엄청난 확신을 갖는데 그 배경에는 누구도 반박할 수 없다고 확신...</td>\n","      <td>893</td>\n","      <td>토론</td>\n","      <td>ENTP</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>이수빈</td>\n","      <td>지나가는 엔팁여성인데 진짜 성격고나리 주변 특히 가족한테서 개많이 듣습니다 그리고 ...</td>\n","      <td>845</td>\n","      <td>토론</td>\n","      <td>ENTP</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>신백</td>\n","      <td>아니 근데 엔팁은 막 시비걸고싶어서 그러는 게 아니라 진짜 순수하게 '토론과 의견'...</td>\n","      <td>735</td>\n","      <td>토론</td>\n","      <td>ENTP</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 5 columns</p>\n","</div>"],"text/plain":["           ID                                            Comment  ...  단어  MBTI\n","0          먹보  계획성은 좋은데 미루는 걸 좋아해요 ㅎㅎ 벼락치기마저 계획하고 실천하는...‘내일 ...  ...  계획  ISTJ\n","1         김비올  ISTJ 댓글 달아봅니다1. 스케줄러: 쓰기도 안 쓰기도 하지만 일을 시작할 때 계...  ...  계획  ISTJ\n","2     hyun ah  ISTJ-T 1. 극한의 계획충 2. 정말 남한테 관심 없음 타인과의 관계에서 감정...  ...  계획  ISTJ\n","3          ᄆᄆ  ISTJ인데 먼일을 하면 계획하고 정해놓은 과정에 따라 착착 진행해야 마음이 편함....  ...  계획  ISTJ\n","4         계정1  ISTJ분들 시계 보면서 몇시부터 몇시까지는 뭐 하고 뭐 하고 이런식으로 계획 세우...  ...  계획  ISTJ\n","..        ...                                                ...  ...  ..   ...\n","20     Doha K  주변에 엔팁이 있다면 알아둬야함 엔팁이랑 의견이 다른데 엔팁이 그래 맞아~ 하고 냅...  ...  토론  ENTP\n","21        오지원  그리고 제발 ENTP면서 자기랑 토론 안해주고 수긍하고 넘어간다면 토론을 못하는게 ...  ...  토론  ENTP\n","22         이름  엔팁은 자기 주장에 엄청난 확신을 갖는데 그 배경에는 누구도 반박할 수 없다고 확신...  ...  토론  ENTP\n","23        이수빈  지나가는 엔팁여성인데 진짜 성격고나리 주변 특히 가족한테서 개많이 듣습니다 그리고 ...  ...  토론  ENTP\n","24         신백  아니 근데 엔팁은 막 시비걸고싶어서 그러는 게 아니라 진짜 순수하게 '토론과 의견'...  ...  토론  ENTP\n","\n","[400 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"y39VuyBobBQr"},"source":["\n","df_.to_csv(BASE_DIR/\"best_comment\"/\"상위 5개 합.csv\",index = False, encoding='utf-8-sig')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HKIu3tr2biWA"},"source":[""],"execution_count":null,"outputs":[]}]}